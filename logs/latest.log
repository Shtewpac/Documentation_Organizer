2024-12-24 12:40:28,778 - root - INFO - Initialized GPTProcessor with model: gpt-4o-mini
2024-12-24 12:40:28,779 - root - INFO - Processing file: C:\Users\WilliamKraft\Documents\Coding Projects\Documentation_Organizer\example_documentation\alpha_vantage\API Documentation _ Alpha Vantage.html
2024-12-24 12:40:29,210 - root - INFO - Found 461 flattened sections from HTML.
2024-12-24 12:40:29,210 - root - INFO - Flattened to 461 total sections
2024-12-24 12:40:29,211 - root - DEBUG - Processing section with title: Time Series Stock Data APIs
2024-12-24 12:40:29,211 - root - DEBUG - Section content length: 165671 chars
2024-12-24 12:40:29,212 - root - DEBUG - Section breadcrumbs: ['ROOT', 'Time Series Stock Data APIs']
2024-12-24 12:40:29,235 - root - DEBUG - Token count for section 'Time Series Stock Data APIs': 37406
2024-12-24 12:40:29,236 - root - DEBUG - Context window size: 128000
2024-12-24 12:40:29,236 - root - INFO - Processing section 'Time Series Stock Data APIs' with model gpt-4o-mini.
2024-12-24 12:40:29,258 - root - DEBUG - Prompt length: 166552 chars, 37406 tokens
2024-12-24 12:40:29,271 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x0000014E50B23BA0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an API documentation expert.'}, {'role': 'user', 'content': '\nAnalyze the following HTML documentation section and provide a structured breakdown.\n\nTitle: Time Series Stock Data APIs\nContent: ## Time Series Stock Data APIs\n\nThis suite of APIs provide global equity data in 4 different temporal resolutions: (1) daily, (2) weekly, (3) monthly, and (4) intraday, with 20+ years of historical depth. A lightweight ticker quote endpoint and several utility functions such as ticker search and market open/closure status are also included for your convenience.\n## TIME_SERIES_INTRADAY Trending\n\nTrending\nThis API returns current and 20+ years of historical intraday OHLCV time series of the equity specified, covering\npre-market and post-market hours\nwhere applicable (e.g., 4:00am to 8:00pm Eastern Time for the US market). You can query both raw (as-traded) and split/dividend-adjusted intraday data from this endpoint. The OHLCV data is sometimes called "candles" in finance literature.\npre-market and post-market hours\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe time series of your choice. In this case,\nfunction=TIME_SERIES_INTRADAY\n```\nfunction=TIME_SERIES_INTRADAY\n```\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nThe name of the equity of your choice. For example:\nsymbol=IBM\n```\nsymbol=IBM\n```\n‚ùö Required:\ninterval\n‚ùö Required:\ninterval\n```\ninterval\n```\nTime interval between two consecutive data points in the time series. The following values are supported:\n1min\n,\n5min\n,\n15min\n,\n30min\n,\n60min\n```\n1min\n```\n```\n5min\n```\n```\n15min\n```\n```\n30min\n```\n```\n60min\n```\n‚ùö Optional:\nadjusted\n```\nadjusted\n```\nBy default,\nadjusted=true\nand the output time series is adjusted by historical split and dividend events. Set\nadjusted=false\nto query raw (as-traded) intraday values.\n```\nadjusted=true\n```\n```\nadjusted=false\n```\n‚ùö Optional:\nextended_hours\n```\nextended_hours\n```\nBy default,\nextended_hours=true\nand the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00am to 8:00pm Eastern Time for the US market). Set\nextended_hours=false\nto query regular trading hours (9:30am to 4:00pm US Eastern Time) only.\n```\nextended_hours=true\n```\n```\nextended_hours=false\n```\n‚ùö Optional:\nmonth\n```\nmonth\n```\nBy default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the\nmonth\nparameter (in YYYY-MM format) to query a specific month in history. For example,\nmonth=2009-01\n. Any month in the last 20+ years since 2000-01 (January 2000) is supported.\n```\nmonth\n```\n```\nmonth=2009-01\n```\n‚ùö Optional:\noutputsize\n```\noutputsize\n```\nBy default,\noutputsize=compact\n. Strings\ncompact\nand\nfull\nare accepted with the following specifications:\ncompact\nreturns only the latest 100 data points in the intraday time series;\nfull\nreturns trailing 30 days of the most recent intraday data if the\nmonth\nparameter (see above) is not specified, or the full intraday data for a specific month in history if the\nmonth\nparameter is specified. The "compact" option is recommended if you would like to reduce the data size of each API call.\n```\noutputsize=compact\n```\n```\ncompact\n```\n```\nfull\n```\n```\ncompact\n```\n```\nfull\n```\n```\nmonth\n```\n```\nmonth\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the intraday time series in JSON format;\ncsv\nreturns the time series as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Examples (click for JSON output)\n\nExamples (click for JSON output)\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\n```\nfunction\nsymbol\ninterval\napikey\nQuery the most recent full 30 days of intraday data by setting outputsize=full\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo\n```\nfunction\nsymbol\ninterval\noutputsize\napikey\nQuery intraday data for a given month in history (e.g., 2009-01). Any month in the last 20+ years (since 2000-01) is supported\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\nmonth\n=2009-01&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\nmonth\n=2009-01&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo\n```\nfunction\nsymbol\ninterval\nmonth\noutputsize\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv\n```\nfunction\nsymbol\ninterval\napikey\ndatatype\nüí° Tip: the intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a\npremium membership plan\nfor your personal use. For commercial use, please\ncontact sales\n.\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC.\nLearn more\nabout the key market data policies you need to know as a data consumer.\nüí° Tip: the intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a\npremium membership plan\nfor your personal use. For commercial use, please\ncontact sales\n.\npremium membership plan\ncontact sales\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC.\nLearn more\nabout the key market data policies you need to know as a data consumer.\nLearn more\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n## TIME_SERIES_DAILY\n\nThis API returns\nraw\n(as-traded) daily time series (date, daily open, daily high, daily low, daily close, daily volume) of the global equity specified, covering 20+ years of historical data. The OHLCV data is sometimes called "candles" in finance literature. If you are also interested in split/dividend-adjusted data, please use the\nDaily Adjusted API\n, which covers adjusted close values and historical split and dividend events.\nraw\nDaily Adjusted API\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe time series of your choice. In this case,\nfunction=TIME_SERIES_DAILY\n```\nfunction=TIME_SERIES_DAILY\n```\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nThe name of the equity of your choice. For example:\nsymbol=IBM\n```\nsymbol=IBM\n```\n‚ùö Optional:\noutputsize\n```\noutputsize\n```\nBy default,\noutputsize=compact\n. Strings\ncompact\nand\nfull\nare accepted with the following specifications:\ncompact\nreturns only the latest 100 data points;\nfull\nreturns the full-length time series of 20+ years of historical data. The "compact" option is recommended if you would like to reduce the data size of each API call.\n```\noutputsize=compact\n```\n```\ncompact\n```\n```\nfull\n```\n```\ncompact\n```\n```\nfull\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the daily time series in JSON format;\ncsv\nreturns the time series as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Examples (click for JSON output)\n\nExamples (click for JSON output)\nSample ticker traded in the United States\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in UK - London Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=TSCO.LON&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=TSCO.LON&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=TSCO.LON&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in Canada - Toronto Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=SHOP.TRT&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=SHOP.TRT&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=SHOP.TRT&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in Canada - Toronto Venture Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=GPV.TRV&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=GPV.TRV&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=GPV.TRV&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in Germany - XETRA\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=MBG.DEX&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=MBG.DEX&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=MBG.DEX&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in India - BSE\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=RELIANCE.BSE&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=RELIANCE.BSE&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=RELIANCE.BSE&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in China - Shanghai Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=600104.SHH&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=600104.SHH&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=600104.SHH&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in China - Shenzhen Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=000002.SHZ&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=000002.SHZ&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=000002.SHZ&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nThe above is just a small sample of the 100,000+ symbols we support. Please refer to our\nSearch Endpoint\nto look up any supported global stock, ETF, or mutual fund symbols of your interest.\nSearch Endpoint\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo&datatype=csv\n```\nfunction\nsymbol\napikey\ndatatype\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n## TIME_SERIES_DAILY_ADJUSTED Trending Premium\n\nTrending\nPremium\nThis API returns raw (as-traded) daily open/high/low/close/volume values,\nadjusted close\nvalues, and historical split/dividend events of the global equity specified, covering 20+ years of historical data. The OHLCV data is sometimes called "candles" in finance literature.\nadjusted close\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe time series of your choice. In this case,\nfunction=TIME_SERIES_DAILY_ADJUSTED\n```\nfunction=TIME_SERIES_DAILY_ADJUSTED\n```\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nThe name of the equity of your choice. For example:\nsymbol=IBM\n```\nsymbol=IBM\n```\n‚ùö Optional:\noutputsize\n```\noutputsize\n```\nBy default,\noutputsize=compact\n. Strings\ncompact\nand\nfull\nare accepted with the following specifications:\ncompact\nreturns only the latest 100 data points;\nfull\nreturns the full-length time series of 20+ years of historical data. The "compact" option is recommended if you would like to reduce the data size of each API call.\n```\noutputsize=compact\n```\n```\ncompact\n```\n```\nfull\n```\n```\ncompact\n```\n```\nfull\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the daily time series in JSON format;\ncsv\nreturns the time series as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Examples (click for JSON output)\n\nExamples (click for JSON output)\nSample ticker traded in the United States\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=IBM&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=IBM&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in UK - London Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=TSCO.LON&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=TSCO.LON&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=TSCO.LON&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in Canada - Toronto Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=SHOP.TRT&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=SHOP.TRT&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=SHOP.TRT&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in Canada - Toronto Venture Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=GPV.TRV&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=GPV.TRV&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=GPV.TRV&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in Germany - XETRA\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=MBG.DEX&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=MBG.DEX&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=MBG.DEX&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in India - BSE\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=RELIANCE.BSE&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=RELIANCE.BSE&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=RELIANCE.BSE&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in China - Shanghai Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=600104.SHH&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=600104.SHH&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=600104.SHH&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in China - Shenzhen Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=000002.SHZ&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=000002.SHZ&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=000002.SHZ&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nThe above is just a small sample of the 100,000+ symbols we support. Please refer to our\nSearch Endpoint\nto look up any supported global stock, ETF, or mutual fund symbols of your interest.\nSearch Endpoint\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo&datatype=csv\n```\nfunction\nsymbol\napikey\ndatatype\nüí° Tip: this is a premium API function. Subscribe to a\npremium membership plan\nto instantly unlock all premium APIs.\nüí° Tip: this is a premium API function. Subscribe to a\npremium membership plan\nto instantly unlock all premium APIs.\npremium membership plan\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n## TIME_SERIES_WEEKLY\n\nThis API returns weekly time series (last trading day of each week, weekly open, weekly high, weekly low, weekly close, weekly volume) of the global equity specified, covering 20+ years of historical data.\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe time series of your choice. In this case,\nfunction=TIME_SERIES_WEEKLY\n```\nfunction=TIME_SERIES_WEEKLY\n```\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nThe name of the equity of your choice. For example:\nsymbol=IBM\n```\nsymbol=IBM\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the weekly time series in JSON format;\ncsv\nreturns the time series as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Example (click for JSON output)\n\nExample (click for JSON output)\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY&\nsymbol\n=IBM&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY&\nsymbol\n=IBM&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY&\nsymbol\n=TSCO.LON&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY&\nsymbol\n=TSCO.LON&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=TSCO.LON&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo&datatype=csv\n```\nfunction\nsymbol\napikey\ndatatype\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n## TIME_SERIES_WEEKLY_ADJUSTED\n\nThis API returns weekly adjusted time series (last trading day of each week, weekly open, weekly high, weekly low, weekly close, weekly adjusted close, weekly volume, weekly dividend) of the global equity specified, covering 20+ years of historical data.\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe time series of your choice. In this case,\nfunction=TIME_SERIES_WEEKLY_ADJUSTED\n```\nfunction=TIME_SERIES_WEEKLY_ADJUSTED\n```\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nThe name of the equity of your choice. For example:\nsymbol=IBM\n```\nsymbol=IBM\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the weekly time series in JSON format;\ncsv\nreturns the time series as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Example (click for JSON output)\n\nExample (click for JSON output)\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY_ADJUSTED&\nsymbol\n=TSCO.LON&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY_ADJUSTED&\nsymbol\n=TSCO.LON&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=TSCO.LON&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_WEEKLY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo&datatype=csv\n```\nfunction\nsymbol\napikey\ndatatype\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n## TIME_SERIES_MONTHLY\n\nThis API returns monthly time series (last trading day of each month, monthly open, monthly high, monthly low, monthly close, monthly volume) of the global equity specified, covering 20+ years of historical data.\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe time series of your choice. In this case,\nfunction=TIME_SERIES_MONTHLY\n```\nfunction=TIME_SERIES_MONTHLY\n```\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nThe name of the equity of your choice. For example:\nsymbol=IBM\n```\nsymbol=IBM\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the monthly time series in JSON format;\ncsv\nreturns the time series as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Example (click for JSON output)\n\nExample (click for JSON output)\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY&\nsymbol\n=IBM&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY&\nsymbol\n=IBM&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY&\nsymbol\n=TSCO.LON&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY&\nsymbol\n=TSCO.LON&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=TSCO.LON&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo&datatype=csv\n```\nfunction\nsymbol\napikey\ndatatype\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n## TIME_SERIES_MONTHLY_ADJUSTED\n\nThis API returns monthly adjusted time series (last trading day of each month, monthly open, monthly high, monthly low, monthly close, monthly adjusted close, monthly volume, monthly dividend) of the equity specified, covering 20+ years of historical data.\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe time series of your choice. In this case,\nfunction=TIME_SERIES_MONTHLY_ADJUSTED\n```\nfunction=TIME_SERIES_MONTHLY_ADJUSTED\n```\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nThe name of the equity of your choice. For example:\nsymbol=IBM\n```\nsymbol=IBM\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the monthly time series in JSON format;\ncsv\nreturns the time series as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Example (click for JSON output)\n\nExample (click for JSON output)\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY_ADJUSTED&\nsymbol\n=TSCO.LON&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY_ADJUSTED&\nsymbol\n=TSCO.LON&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=TSCO.LON&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_MONTHLY_ADJUSTED&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo&datatype=csv\n```\nfunction\nsymbol\napikey\ndatatype\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n## Quote Endpoint Trending\n\nTrending\nThis endpoint returns the latest price and volume information for a ticker of your choice. You can specify one ticker per API request.\nIf you would like to query a large universe of tickers in bulk, you may want to try out our\nRealtime Bulk Quotes API\n, which accepts up to 100 tickers per API request.\nRealtime Bulk Quotes API\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe API function of your choice.\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nThe symbol of the global ticker of your choice. For example:\nsymbol=IBM\n.\n```\nsymbol=IBM\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the quote data in JSON format;\ncsv\nreturns the quote data as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Examples (click for JSON output)\n\nExamples (click for JSON output)\nhttps://www.alphavantage.co/query?\nfunction\n=GLOBAL_QUOTE&\nsymbol\n=IBM&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=GLOBAL_QUOTE&\nsymbol\n=IBM&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=GLOBAL_QUOTE&\nsymbol\n=300135.SHZ&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=GLOBAL_QUOTE&\nsymbol\n=300135.SHZ&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=300135.SHZ&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=GLOBAL_QUOTE&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=GLOBAL_QUOTE&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo&datatype=csv\n```\nfunction\nsymbol\napikey\ndatatype\nüí° Tip: by default, the quote endpoint is updated at the end of each trading day for all users. If you would like to access realtime or 15-minute delayed stock quote data for the US market, please subscribe to a\npremium membership plan\nfor your personal use. For commercial use, please\ncontact sales\n.\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC.\nLearn more\nabout the key market data policies you need to know as a data consumer.\nüí° Tip: by default, the quote endpoint is updated at the end of each trading day for all users. If you would like to access realtime or 15-minute delayed stock quote data for the US market, please subscribe to a\npremium membership plan\nfor your personal use. For commercial use, please\ncontact sales\n.\npremium membership plan\ncontact sales\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC.\nLearn more\nabout the key market data policies you need to know as a data consumer.\nLearn more\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n## Realtime Bulk Quotes Premium\n\nPremium\nThis API returns realtime quotes for US-traded symbols in bulk, accepting up to\n100 symbols\nper API request and covering both regular and extended (pre-market and post-market) trading hours. You can use this endpoint as a high-throughput alternative to the\nGlobal Quote API\n, which accepts one symbol per API request.\n100 symbols\nGlobal Quote API\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe time series of your choice. In this case,\nfunction=REALTIME_BULK_QUOTES\n```\nfunction=REALTIME_BULK_QUOTES\n```\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nUp to\n100 symbols\nseparated by comma. For example:\nsymbol=MSFT,AAPL,IBM\n. If more than 100 symbols are provided, only the first 100 symbols will be honored as part of the API input.\n100 symbols\n```\nsymbol=MSFT,AAPL,IBM\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the search results in JSON format;\ncsv\nreturns the search results as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Examples (click for JSON output)\n\nExamples (click for JSON output)\nhttps://www.alphavantage.co/query?\nfunction\n=REALTIME_BULK_QUOTES&\nsymbol\n=MSFT,AAPL,IBM&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=REALTIME_BULK_QUOTES&\nsymbol\n=MSFT,AAPL,IBM&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo\n```\nfunction\nsymbol\napikey\nüí° Tip: this is a premium API function. Please subscribe to any\npremium membership plan\nthat mentions "Realtime US Market Data" in its description to unlock this endpoint for your personal use. For commercial use, please\ncontact sales\n.\nüí° Tip: this is a premium API function. Please subscribe to any\npremium membership plan\nthat mentions "Realtime US Market Data" in its description to unlock this endpoint for your personal use. For commercial use, please\ncontact sales\n.\npremium membership plan\ncontact sales\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=REALTIME_BULK_QUOTES&symbol=MSFT,AAPL,IBM&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n## Search Endpoint Utility\n\nUtility\nLooking for some specific symbols or companies? Trying to build an auto-complete search box similar to the one below?\nWe\'ve got you covered! The Search Endpoint returns the best-matching symbols and market information based on keywords of your choice. The search results also contain match scores that provide you with the full flexibility to develop your own search and filtering logic.\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe API function of your choice. In this case,\nfunction=SYMBOL_SEARCH\n```\nfunction=SYMBOL_SEARCH\n```\n‚ùö Required:\nkeywords\n‚ùö Required:\nkeywords\n```\nkeywords\n```\nA text string of your choice. For example:\nkeywords=microsoft\n.\n```\nkeywords=microsoft\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the search results in JSON format;\ncsv\nreturns the search results as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Examples (click for JSON output)\n\nExamples (click for JSON output)\nhttps://www.alphavantage.co/query?\nfunction\n=SYMBOL_SEARCH&\nkeywords\n=tesco&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=SYMBOL_SEARCH&\nkeywords\n=tesco&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo\n```\nfunction\nkeywords\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=SYMBOL_SEARCH&\nkeywords\n=tencent&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=SYMBOL_SEARCH&\nkeywords\n=tencent&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tencent&apikey=demo\n```\nfunction\nkeywords\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=SYMBOL_SEARCH&\nkeywords\n=BA&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=SYMBOL_SEARCH&\nkeywords\n=BA&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=BA&apikey=demo\n```\nfunction\nkeywords\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=SYMBOL_SEARCH&\nkeywords\n=SAIC&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=SYMBOL_SEARCH&\nkeywords\n=SAIC&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=SAIC&apikey=demo\n```\nfunction\nkeywords\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=SYMBOL_SEARCH&\nkeywords\n=BA&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=SYMBOL_SEARCH&\nkeywords\n=BA&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=BA&apikey=demo&datatype=csv\n```\nfunction\nkeywords\napikey\ndatatype\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=tesco&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n## Global Market Open & Close Status Utility\n\nUtility\nThis endpoint returns the current market status (open vs. closed) of major trading venues for equities, forex, and cryptocurrencies around the world.\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe API function of your choice. In this case,\nfunction=MARKET_STATUS\n```\nfunction=MARKET_STATUS\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Examples (click for JSON output)\n\nExamples (click for JSON output)\nhttps://www.alphavantage.co/query?\nfunction\n=MARKET_STATUS&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=MARKET_STATUS&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo\n```\nfunction\napikey\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\nOptions Data APIs\nThis suite of APIs provide realtime and historical US options data, spanning 15+ years of history with full market/volume coverage.\nRealtime Options\nTrending\nPremium\nThis API returns realtime US options data with full market coverage. Option chains are sorted by expiration dates in chronological order. Within the same expiration date, contracts are sorted by strike prices from low to high.\nAPI Parameters\n‚ùö Required:\nfunction\nThe time series of your choice. In this case,\nfunction=REALTIME_OPTIONS\n‚ùö Required:\nsymbol\nThe name of the equity of your choice. For example:\nsymbol=IBM\n‚ùö Optional:\ncontract\nThe US options contract ID you would like to specify. By default, the\ncontract\nparameter is not set and the entire option chain for a given symbol will be returned.\n‚ùö Optional:\ndatatype\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the options data in JSON format;\ncsv\nreturns the data as a CSV (comma separated value) file.\n‚ùö Required:\napikey\nYour API key. Claim your free API key\nhere\n.\nExamples (click for JSON output)\nhttps://www.alphavantage.co/query?\nfunction\n=REALTIME_OPTIONS&\nsymbol\n=IBM&\napikey\n=demo\nüí° Tip: this is a premium API function. Subscribe to either the 600 requests per minute or the 1200 requests per minute\npremium membership plan\nto unlock realtime options data.\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=REALTIME_OPTIONS&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=REALTIME_OPTIONS&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=REALTIME_OPTIONS&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=REALTIME_OPTIONS&symbol=IBM&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nHistorical Options\nTrending\nThis API returns the full historical options chain for a specific symbol on a specific date, covering 15+ years of history. Implied volatility (IV) and common Greeks (e.g., delta, gamma, theta, vega, rho) are also returned. Option chains are sorted by expiration dates in chronological order. Within the same expiration date, contracts are sorted by strike prices from low to high.\nAPI Parameters\n‚ùö Required:\nfunction\nThe time series of your choice. In this case,\nfunction=HISTORICAL_OPTIONS\n‚ùö Required:\nsymbol\nThe name of the equity of your choice. For example:\nsymbol=IBM\n‚ùö Optional:\ndate\nBy default, the\ndate\nparameter is not set and the API will return data for the previous trading session. Any date later than 2008-01-01 is accepted. For example,\ndate=2017-11-15\n.\n‚ùö Optional:\ndatatype\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the options data in JSON format;\ncsv\nreturns the data as a CSV (comma separated value) file.\n‚ùö Required:\napikey\nYour API key. Claim your free API key\nhere\n.\nExample (click for JSON output)\nWhen the date paramter is not set, data from the previous trading session is returned\nhttps://www.alphavantage.co/query?\nfunction\n=HISTORICAL_OPTIONS&\nsymbol\n=IBM&\napikey\n=demo\nSpecify a date to retrieve options data for any trading day in the past 15+ years (since 2008-01-01)\nhttps://www.alphavantage.co/query?\nfunction\n=HISTORICAL_OPTIONS&\nsymbol\n=IBM&\ndate\n=2017-11-15&\napikey\n=demo\nDownloadable CSV file:\nhttps://www.alphavantage.co/query?\nfunction\n=HISTORICAL_OPTIONS&\nsymbol\n=IBM&\ndate\n=2017-11-15&\napikey\n=demo&\ndatatype\n=csv\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=HISTORICAL_OPTIONS&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=HISTORICAL_OPTIONS&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=HISTORICAL_OPTIONS&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=HISTORICAL_OPTIONS&symbol=IBM&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n\nFormat your response to match these exact field requirements:\n\n- section_type: Must be one of ["endpoint", "concept", "overview", "other"]\n  Choose based on the content type:\n  - "endpoint" for API endpoint documentation\n  - "concept" for explanatory content about concepts\n  - "overview" for introductory or high-level content\n  - "other" for anything else\n\n- related_endpoints: A list of strings containing any API endpoints mentioned\n  in the content. Return an empty list if none found.\n\n- filename: Create a URL-safe filename ending in .md.\n  Convert spaces to hyphens, remove special characters, use lowercase.\n\n- content: The section content converted to well-formatted Markdown.\n  Ensure proper heading hierarchy and code block formatting.\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 16384, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'properties': {'section_type': {'title': 'Section Type', 'type': 'string'}, 'related_endpoints': {'items': {'type': 'string'}, 'title': 'Related Endpoints', 'type': 'array'}, 'filename': {'title': 'Filename', 'type': 'string'}, 'content': {'title': 'Content', 'type': 'string'}}, 'required': ['section_type', 'related_endpoints', 'filename', 'content'], 'title': 'ProcessedSection', 'type': 'object', 'additionalProperties': False}, 'name': 'ProcessedSection', 'strict': True}}, 'stream': False}}
2024-12-24 12:40:29,286 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-12-24 12:40:29,286 - httpcore.connection - DEBUG - connect_tcp.started host='api.openai.com' port=443 local_address=None timeout=5.0 socket_options=None
2024-12-24 12:40:29,374 - httpcore.connection - DEBUG - connect_tcp.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000014E509E0D70>
2024-12-24 12:40:29,375 - httpcore.connection - DEBUG - start_tls.started ssl_context=<ssl.SSLContext object at 0x0000014E4F9D0EF0> server_hostname='api.openai.com' timeout=5.0
2024-12-24 12:40:29,405 - httpcore.connection - DEBUG - start_tls.complete return_value=<httpcore._backends.sync.SyncStream object at 0x0000014E50B1E850>
2024-12-24 12:40:29,406 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-12-24 12:40:29,407 - httpcore.http11 - DEBUG - send_request_headers.complete
2024-12-24 12:40:29,407 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-12-24 12:40:29,498 - httpcore.http11 - DEBUG - send_request_body.complete
2024-12-24 12:40:29,499 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-12-24 12:40:52,686 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 24 Dec 2024 20:40:54 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vtqywlnqqks67d3wh4wlto26'), (b'openai-processing-ms', b'22897'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9958274'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'250ms'), (b'x-request-id', b'req_604899ea470b2df4d2e59a35e5d17996'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'Set-Cookie', b'__cf_bm=389fam8vgZOcNrur_Flk1k7uysbHB.8QvA_kmzZuCOc-1735072854-1.0.1.1-aHyUPozJyG.un5yeqkHBfSfDxGpfhMHmL_Rv_sTENDPsqr7tznw.VzhPt4mES58HLiOG9s7K97IsgqT64h82KA; path=/; expires=Tue, 24-Dec-24 21:10:54 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'X-Content-Type-Options', b'nosniff'), (b'Set-Cookie', b'_cfuvid=47AxVEEJlt1mIJ2X7hg2kjSom8GL3r2o_0JPaMo2CBg-1735072854902-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8f73682e0d5c09f1-LAS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-12-24 12:40:52,690 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-24 12:40:52,690 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-12-24 12:40:52,691 - httpcore.http11 - DEBUG - receive_response_body.complete
2024-12-24 12:40:52,691 - httpcore.http11 - DEBUG - response_closed.started
2024-12-24 12:40:52,691 - httpcore.http11 - DEBUG - response_closed.complete
2024-12-24 12:40:52,691 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers([('date', 'Tue, 24 Dec 2024 20:40:54 GMT'), ('content-type', 'application/json'), ('transfer-encoding', 'chunked'), ('connection', 'keep-alive'), ('access-control-expose-headers', 'X-Request-ID'), ('openai-organization', 'user-vtqywlnqqks67d3wh4wlto26'), ('openai-processing-ms', '22897'), ('openai-version', '2020-10-01'), ('x-ratelimit-limit-requests', '10000'), ('x-ratelimit-limit-tokens', '10000000'), ('x-ratelimit-remaining-requests', '9999'), ('x-ratelimit-remaining-tokens', '9958274'), ('x-ratelimit-reset-requests', '6ms'), ('x-ratelimit-reset-tokens', '250ms'), ('x-request-id', 'req_604899ea470b2df4d2e59a35e5d17996'), ('strict-transport-security', 'max-age=31536000; includeSubDomains; preload'), ('cf-cache-status', 'DYNAMIC'), ('set-cookie', '__cf_bm=389fam8vgZOcNrur_Flk1k7uysbHB.8QvA_kmzZuCOc-1735072854-1.0.1.1-aHyUPozJyG.un5yeqkHBfSfDxGpfhMHmL_Rv_sTENDPsqr7tznw.VzhPt4mES58HLiOG9s7K97IsgqT64h82KA; path=/; expires=Tue, 24-Dec-24 21:10:54 GMT; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('x-content-type-options', 'nosniff'), ('set-cookie', '_cfuvid=47AxVEEJlt1mIJ2X7hg2kjSom8GL3r2o_0JPaMo2CBg-1735072854902-0.0.1.1-604800000; path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None'), ('server', 'cloudflare'), ('cf-ray', '8f73682e0d5c09f1-LAS'), ('content-encoding', 'gzip'), ('alt-svc', 'h3=":443"; ma=86400')])
2024-12-24 12:40:52,692 - openai._base_client - DEBUG - request_id: req_604899ea470b2df4d2e59a35e5d17996
2024-12-24 12:40:52,770 - root - DEBUG - Raw completion response: ParsedChatCompletion[ProcessedSection](id='chatcmpl-Ai5zcPpR8oDasFb6X9tCAg6njoCwl', choices=[ParsedChoice[ProcessedSection](finish_reason='stop', index=0, logprobs=None, message=ParsedChatCompletionMessage[ProcessedSection](content='{"section_type":"overview","related_endpoints":[],"filename":"time-series-stock-data-apis.md","content":"## Time Series Stock Data APIs\\n\\nThis suite of APIs provides global equity data in four different temporal resolutions: (1) daily, (2) weekly, (3) monthly, and (4) intraday, with 20+ years of historical depth. A lightweight ticker quote endpoint and several utility functions such as ticker search and market open/closure status are also included for your convenience.  \\n\\n### TIME_SERIES_INTRADAY Trending\\n\\n**Trending**  \\nThis API returns current and 20+ years of historical intraday OHLCV time series of the equity specified, covering pre-market and post-market hours where applicable (e.g., 4:00 am to 8:00 pm Eastern Time for the US market). You can query both raw (as-traded) and split/dividend-adjusted intraday data from this endpoint. The OHLCV data is sometimes called \\"candles\\" in finance literature.  \\n\\n#### API Parameters\\n  \\n- **Required:**  \\n  `function`  \\n  The time series of your choice. In this case,  \\n  ``` \\n function=TIME_SERIES_INTRADAY  \\n  ```  \\n\\n- **Required:**  \\n  `symbol`  \\n  The name of the equity of your choice. For example:  \\n  ``` \\n symbol=IBM  \\n  ```  \\n\\n- **Required:**  \\n  `interval`  \\n  Time interval between two consecutive data points in the time series. The following values are supported:  \\n  `1min`, `5min`, `15min`, `30min`, `60min`  \\n\\n- **Optional:**  \\n  `adjusted`  \\n  By default,  \\n  `adjusted=true`  \\n  and the output time series is adjusted by historical split and dividend events. Set  \\n  `adjusted=false`  \\n  to query raw (as-traded) intraday values.  \\n\\n- **Optional:**  \\n  `extended_hours`  \\n  By default,  \\n  `extended_hours=true`  \\n  and the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00 am to 8:00 pm Eastern Time for the US market). Set  \\n  `extended_hours=false`  \\n  to query regular trading hours (9:30 am to 4:00 pm US Eastern Time) only.  \\n\\n- **Optional:**  \\n  `month`  \\n  By default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the `month` parameter (in YYYY-MM format) to query a specific month in history. For example,  \\n  ``` \\n month=2009-01  \\n  ```  \\n  Any month in the last 20+ years since 2000-01 (January 2000) is supported.  \\n\\n- **Optional:**  \\n  `outputsize`  \\n  By default, `outputsize=compact`. Strings `compact` and `full` are accepted with the following specifications:  \\n  `compact` returns only the latest 100 data points in the intraday time series;  \\n  `full` returns trailing 30 days of the most recent intraday data if the month parameter (see above) is not specified, or the full intraday data for a specific month in history if the month parameter is specified. The \\"compact\\" option is recommended if you would like to reduce the data size of each API call.  \\n\\n- **Optional:**  \\n  `datatype`  \\n  By default,  \\n  `datatype=json`  \\n  . Strings `json` and `csv` are accepted with the following specifications:  \\n  `json` returns the intraday time series in JSON format;  \\n  `csv` returns the time series as a CSV (comma-separated value) file.  \\n\\n- **Required:**  \\n  `apikey`  \\n  Your API key. Claim your free API key here.\\n\\n### Examples (click for JSON output)\\n\\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set.\\n- Example:  \\n``` \\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo \\n```  \\n\\nQuery the most recent full 30 days of intraday data by setting outputsize=full:\\n- Example:  \\n``` \\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo \\n```  \\n\\nQuery intraday data for a given month in history (e.g., 2009-01). Any month in the last 20+ years (since 2000-01) is supported:\\n- Example:  \\n``` \\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo \\n```  \\n\\nOutput data in CSV format:\\n- Example:  \\n``` \\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv \\n```  \\n\\n**Tip:** The intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a premium membership plan for your personal use. For commercial use, please contact sales.  \\n\\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC. Learn more about the key market data policies you need to know as a data consumer."}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=ProcessedSection(section_type='overview', related_endpoints=[], filename='time-series-stock-data-apis.md', content='## Time Series Stock Data APIs\n\nThis suite of APIs provides global equity data in four different temporal resolutions: (1) daily, (2) weekly, (3) monthly, and (4) intraday, with 20+ years of historical depth. A lightweight ticker quote endpoint and several utility functions such as ticker search and market open/closure status are also included for your convenience.  \n\n### TIME_SERIES_INTRADAY Trending\n\n**Trending**  \nThis API returns current and 20+ years of historical intraday OHLCV time series of the equity specified, covering pre-market and post-market hours where applicable (e.g., 4:00 am to 8:00 pm Eastern Time for the US market). You can query both raw (as-traded) and split/dividend-adjusted intraday data from this endpoint. The OHLCV data is sometimes called "candles" in finance literature.  \n\n#### API Parameters\n  \n- **Required:**  \n  `function`  \n  The time series of your choice. In this case,  \n  ``` \n function=TIME_SERIES_INTRADAY  \n  ```  \n\n- **Required:**  \n  `symbol`  \n  The name of the equity of your choice. For example:  \n  ``` \n symbol=IBM  \n  ```  \n\n- **Required:**  \n  `interval`  \n  Time interval between two consecutive data points in the time series. The following values are supported:  \n  `1min`, `5min`, `15min`, `30min`, `60min`  \n\n- **Optional:**  \n  `adjusted`  \n  By default,  \n  `adjusted=true`  \n  and the output time series is adjusted by historical split and dividend events. Set  \n  `adjusted=false`  \n  to query raw (as-traded) intraday values.  \n\n- **Optional:**  \n  `extended_hours`  \n  By default,  \n  `extended_hours=true`  \n  and the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00 am to 8:00 pm Eastern Time for the US market). Set  \n  `extended_hours=false`  \n  to query regular trading hours (9:30 am to 4:00 pm US Eastern Time) only.  \n\n- **Optional:**  \n  `month`  \n  By default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the `month` parameter (in YYYY-MM format) to query a specific month in history. For example,  \n  ``` \n month=2009-01  \n  ```  \n  Any month in the last 20+ years since 2000-01 (January 2000) is supported.  \n\n- **Optional:**  \n  `outputsize`  \n  By default, `outputsize=compact`. Strings `compact` and `full` are accepted with the following specifications:  \n  `compact` returns only the latest 100 data points in the intraday time series;  \n  `full` returns trailing 30 days of the most recent intraday data if the month parameter (see above) is not specified, or the full intraday data for a specific month in history if the month parameter is specified. The "compact" option is recommended if you would like to reduce the data size of each API call.  \n\n- **Optional:**  \n  `datatype`  \n  By default,  \n  `datatype=json`  \n  . Strings `json` and `csv` are accepted with the following specifications:  \n  `json` returns the intraday time series in JSON format;  \n  `csv` returns the time series as a CSV (comma-separated value) file.  \n\n- **Required:**  \n  `apikey`  \n  Your API key. Claim your free API key here.\n\n### Examples (click for JSON output)\n\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set.\n- Example:  \n``` \nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo \n```  \n\nQuery the most recent full 30 days of intraday data by setting outputsize=full:\n- Example:  \n``` \nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo \n```  \n\nQuery intraday data for a given month in history (e.g., 2009-01). Any month in the last 20+ years (since 2000-01) is supported:\n- Example:  \n``` \nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo \n```  \n\nOutput data in CSV format:\n- Example:  \n``` \nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv \n```  \n\n**Tip:** The intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a premium membership plan for your personal use. For commercial use, please contact sales.  \n\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC. Learn more about the key market data policies you need to know as a data consumer.')))], created=1735072832, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=1370, prompt_tokens=37506, total_tokens=38876, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))
2024-12-24 12:40:52,776 - root - DEBUG - Parsed result: {'section_type': 'overview', 'related_endpoints': [], 'filename': 'time-series-stock-data-apis.md', 'content': '## Time Series Stock Data APIs\n\nThis suite of APIs provides global equity data in four different temporal resolutions: (1) daily, (2) weekly, (3) monthly, and (4) intraday, with 20+ years of historical depth. A lightweight ticker quote endpoint and several utility functions such as ticker search and market open/closure status are also included for your convenience.  \n\n### TIME_SERIES_INTRADAY Trending\n\n**Trending**  \nThis API returns current and 20+ years of historical intraday OHLCV time series of the equity specified, covering pre-market and post-market hours where applicable (e.g., 4:00 am to 8:00 pm Eastern Time for the US market). You can query both raw (as-traded) and split/dividend-adjusted intraday data from this endpoint. The OHLCV data is sometimes called "candles" in finance literature.  \n\n#### API Parameters\n  \n- **Required:**  \n  `function`  \n  The time series of your choice. In this case,  \n  ``` \n function=TIME_SERIES_INTRADAY  \n  ```  \n\n- **Required:**  \n  `symbol`  \n  The name of the equity of your choice. For example:  \n  ``` \n symbol=IBM  \n  ```  \n\n- **Required:**  \n  `interval`  \n  Time interval between two consecutive data points in the time series. The following values are supported:  \n  `1min`, `5min`, `15min`, `30min`, `60min`  \n\n- **Optional:**  \n  `adjusted`  \n  By default,  \n  `adjusted=true`  \n  and the output time series is adjusted by historical split and dividend events. Set  \n  `adjusted=false`  \n  to query raw (as-traded) intraday values.  \n\n- **Optional:**  \n  `extended_hours`  \n  By default,  \n  `extended_hours=true`  \n  and the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00 am to 8:00 pm Eastern Time for the US market). Set  \n  `extended_hours=false`  \n  to query regular trading hours (9:30 am to 4:00 pm US Eastern Time) only.  \n\n- **Optional:**  \n  `month`  \n  By default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the `month` parameter (in YYYY-MM format) to query a specific month in history. For example,  \n  ``` \n month=2009-01  \n  ```  \n  Any month in the last 20+ years since 2000-01 (January 2000) is supported.  \n\n- **Optional:**  \n  `outputsize`  \n  By default, `outputsize=compact`. Strings `compact` and `full` are accepted with the following specifications:  \n  `compact` returns only the latest 100 data points in the intraday time series;  \n  `full` returns trailing 30 days of the most recent intraday data if the month parameter (see above) is not specified, or the full intraday data for a specific month in history if the month parameter is specified. The "compact" option is recommended if you would like to reduce the data size of each API call.  \n\n- **Optional:**  \n  `datatype`  \n  By default,  \n  `datatype=json`  \n  . Strings `json` and `csv` are accepted with the following specifications:  \n  `json` returns the intraday time series in JSON format;  \n  `csv` returns the time series as a CSV (comma-separated value) file.  \n\n- **Required:**  \n  `apikey`  \n  Your API key. Claim your free API key here.\n\n### Examples (click for JSON output)\n\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set.\n- Example:  \n``` \nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo \n```  \n\nQuery the most recent full 30 days of intraday data by setting outputsize=full:\n- Example:  \n``` \nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo \n```  \n\nQuery intraday data for a given month in history (e.g., 2009-01). Any month in the last 20+ years (since 2000-01) is supported:\n- Example:  \n``` \nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo \n```  \n\nOutput data in CSV format:\n- Example:  \n``` \nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv \n```  \n\n**Tip:** The intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a premium membership plan for your personal use. For commercial use, please contact sales.  \n\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC. Learn more about the key market data policies you need to know as a data consumer.'}
2024-12-24 12:40:52,778 - root - INFO - Successfully processed section 'Time Series Stock Data APIs' -> time-series-stock-data-apis.md
2024-12-24 12:40:52,778 - root - DEBUG - Successfully processed section 'Time Series Stock Data APIs'
2024-12-24 12:40:52,778 - root - DEBUG - Result type: overview
2024-12-24 12:40:52,778 - root - DEBUG - Generated filename: time-series-stock-data-apis.md
2024-12-24 12:40:52,778 - root - DEBUG - Processing section with title: TIME_SERIES_INTRADAY Trending
2024-12-24 12:40:52,779 - root - DEBUG - Section content length: 17272 chars
2024-12-24 12:40:52,779 - root - DEBUG - Section breadcrumbs: ['ROOT', 'Time Series Stock Data APIs', 'TIME_SERIES_INTRADAY Trending']
2024-12-24 12:40:52,782 - root - DEBUG - Token count for section 'TIME_SERIES_INTRADAY Trending': 4252
2024-12-24 12:40:52,782 - root - DEBUG - Context window size: 128000
2024-12-24 12:40:52,782 - root - INFO - Processing section 'TIME_SERIES_INTRADAY Trending' with model gpt-4o-mini.
2024-12-24 12:40:52,785 - root - DEBUG - Prompt length: 18155 chars, 4252 tokens
2024-12-24 12:40:52,788 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x0000014E4EC4E520>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an API documentation expert.'}, {'role': 'user', 'content': '\nAnalyze the following HTML documentation section and provide a structured breakdown.\n\nTitle: TIME_SERIES_INTRADAY Trending\nContent: ## TIME_SERIES_INTRADAY Trending\n\nTrending\nThis API returns current and 20+ years of historical intraday OHLCV time series of the equity specified, covering\npre-market and post-market hours\nwhere applicable (e.g., 4:00am to 8:00pm Eastern Time for the US market). You can query both raw (as-traded) and split/dividend-adjusted intraday data from this endpoint. The OHLCV data is sometimes called "candles" in finance literature.\npre-market and post-market hours\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe time series of your choice. In this case,\nfunction=TIME_SERIES_INTRADAY\n```\nfunction=TIME_SERIES_INTRADAY\n```\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nThe name of the equity of your choice. For example:\nsymbol=IBM\n```\nsymbol=IBM\n```\n‚ùö Required:\ninterval\n‚ùö Required:\ninterval\n```\ninterval\n```\nTime interval between two consecutive data points in the time series. The following values are supported:\n1min\n,\n5min\n,\n15min\n,\n30min\n,\n60min\n```\n1min\n```\n```\n5min\n```\n```\n15min\n```\n```\n30min\n```\n```\n60min\n```\n‚ùö Optional:\nadjusted\n```\nadjusted\n```\nBy default,\nadjusted=true\nand the output time series is adjusted by historical split and dividend events. Set\nadjusted=false\nto query raw (as-traded) intraday values.\n```\nadjusted=true\n```\n```\nadjusted=false\n```\n‚ùö Optional:\nextended_hours\n```\nextended_hours\n```\nBy default,\nextended_hours=true\nand the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00am to 8:00pm Eastern Time for the US market). Set\nextended_hours=false\nto query regular trading hours (9:30am to 4:00pm US Eastern Time) only.\n```\nextended_hours=true\n```\n```\nextended_hours=false\n```\n‚ùö Optional:\nmonth\n```\nmonth\n```\nBy default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the\nmonth\nparameter (in YYYY-MM format) to query a specific month in history. For example,\nmonth=2009-01\n. Any month in the last 20+ years since 2000-01 (January 2000) is supported.\n```\nmonth\n```\n```\nmonth=2009-01\n```\n‚ùö Optional:\noutputsize\n```\noutputsize\n```\nBy default,\noutputsize=compact\n. Strings\ncompact\nand\nfull\nare accepted with the following specifications:\ncompact\nreturns only the latest 100 data points in the intraday time series;\nfull\nreturns trailing 30 days of the most recent intraday data if the\nmonth\nparameter (see above) is not specified, or the full intraday data for a specific month in history if the\nmonth\nparameter is specified. The "compact" option is recommended if you would like to reduce the data size of each API call.\n```\noutputsize=compact\n```\n```\ncompact\n```\n```\nfull\n```\n```\ncompact\n```\n```\nfull\n```\n```\nmonth\n```\n```\nmonth\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the intraday time series in JSON format;\ncsv\nreturns the time series as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Examples (click for JSON output)\n\nExamples (click for JSON output)\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\n```\nfunction\nsymbol\ninterval\napikey\nQuery the most recent full 30 days of intraday data by setting outputsize=full\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo\n```\nfunction\nsymbol\ninterval\noutputsize\napikey\nQuery intraday data for a given month in history (e.g., 2009-01). Any month in the last 20+ years (since 2000-01) is supported\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\nmonth\n=2009-01&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\nmonth\n=2009-01&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo\n```\nfunction\nsymbol\ninterval\nmonth\noutputsize\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv\n```\nfunction\nsymbol\ninterval\napikey\ndatatype\nüí° Tip: the intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a\npremium membership plan\nfor your personal use. For commercial use, please\ncontact sales\n.\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC.\nLearn more\nabout the key market data policies you need to know as a data consumer.\nüí° Tip: the intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a\npremium membership plan\nfor your personal use. For commercial use, please\ncontact sales\n.\npremium membership plan\ncontact sales\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC.\nLearn more\nabout the key market data policies you need to know as a data consumer.\nLearn more\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n\nFormat your response to match these exact field requirements:\n\n- section_type: Must be one of ["endpoint", "concept", "overview", "other"]\n  Choose based on the content type:\n  - "endpoint" for API endpoint documentation\n  - "concept" for explanatory content about concepts\n  - "overview" for introductory or high-level content\n  - "other" for anything else\n\n- related_endpoints: A list of strings containing any API endpoints mentioned\n  in the content. Return an empty list if none found.\n\n- filename: Create a URL-safe filename ending in .md.\n  Convert spaces to hyphens, remove special characters, use lowercase.\n\n- content: The section content converted to well-formatted Markdown.\n  Ensure proper heading hierarchy and code block formatting.\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 16384, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'properties': {'section_type': {'title': 'Section Type', 'type': 'string'}, 'related_endpoints': {'items': {'type': 'string'}, 'title': 'Related Endpoints', 'type': 'array'}, 'filename': {'title': 'Filename', 'type': 'string'}, 'content': {'title': 'Content', 'type': 'string'}}, 'required': ['section_type', 'related_endpoints', 'filename', 'content'], 'title': 'ProcessedSection', 'type': 'object', 'additionalProperties': False}, 'name': 'ProcessedSection', 'strict': True}}, 'stream': False}}
2024-12-24 12:40:52,794 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-12-24 12:40:52,794 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-12-24 12:40:52,795 - httpcore.http11 - DEBUG - send_request_headers.complete
2024-12-24 12:40:52,795 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-12-24 12:40:52,795 - httpcore.http11 - DEBUG - send_request_body.complete
2024-12-24 12:40:52,796 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-12-24 12:41:07,509 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 24 Dec 2024 20:41:09 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vtqywlnqqks67d3wh4wlto26'), (b'openai-processing-ms', b'14544'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_64e876d9519c7f16d6082d5fba3c0b43'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8f7368bffa3d09f1-LAS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-12-24 12:41:07,512 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-24 12:41:07,513 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-12-24 12:41:07,533 - httpcore.http11 - DEBUG - receive_response_body.complete
2024-12-24 12:41:07,534 - httpcore.http11 - DEBUG - response_closed.started
2024-12-24 12:41:07,535 - httpcore.http11 - DEBUG - response_closed.complete
2024-12-24 12:41:07,535 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 24 Dec 2024 20:41:09 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-vtqywlnqqks67d3wh4wlto26', 'openai-processing-ms': '14544', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_64e876d9519c7f16d6082d5fba3c0b43', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8f7368bffa3d09f1-LAS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-12-24 12:41:07,536 - openai._base_client - DEBUG - request_id: req_64e876d9519c7f16d6082d5fba3c0b43
2024-12-24 12:41:07,540 - root - DEBUG - Raw completion response: ParsedChatCompletion[ProcessedSection](id='chatcmpl-Ai5zzN5oSjdrIfs4QJAlMgk87XAOr', choices=[ParsedChoice[ProcessedSection](finish_reason='stop', index=0, logprobs=None, message=ParsedChatCompletionMessage[ProcessedSection](content='{"section_type":"endpoint","related_endpoints":["https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo","https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo","https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo","https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv"],"filename":"time-series-intraday-trending.md","content":"## TIME_SERIES_INTRADAY Trending\\n\\n### Trending\\nThis API returns current and 20+ years of historical intraday OHLCV time series of the equity specified, covering pre-market and post-market hours where applicable (e.g., 4:00am to 8:00pm Eastern Time for the US market). You can query both raw (as-traded) and split/dividend-adjusted intraday data from this endpoint. The OHLCV data is sometimes called \\"candles\\" in finance literature.\\n\\n### API Parameters\\n\\n#### Required:\\n- **function**  \\n  The time series of your choice. In this case,  \\n  `function=TIME_SERIES_INTRADAY`\\n\\n- **symbol**  \\n  The name of the equity of your choice. For example:  \\n  `symbol=IBM`\\n\\n- **interval**  \\n  Time interval between two consecutive data points in the time series. The following values are supported:  \\n  `1min`, `5min`, `15min`, `30min`, `60min`\\n\\n#### Optional:\\n- **adjusted**  \\n  By default, `adjusted=true` and the output time series is adjusted by historical split and dividend events. Set `adjusted=false` to query raw (as-traded) intraday values.\\n\\n- **extended_hours**  \\n  By default, `extended_hours=true` and the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00am to 8:00pm Eastern Time for the US market). Set `extended_hours=false` to query regular trading hours (9:30am to 4:00pm US Eastern Time) only.\\n\\n- **month**  \\n  By default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the `month` parameter (in YYYY-MM format) to query a specific month in history. For example, `month=2009-01`. Any month in the last 20+ years since 2000-01 (January 2000) is supported.\\n\\n- **outputsize**  \\n  By default, `outputsize=compact`. Strings `compact` and `full` are accepted with the following specifications:\\n  - `compact` returns only the latest 100 data points in the intraday time series;\\n  - `full` returns trailing 30 days of the most recent intraday data if the `month` parameter (see above) is not specified, or the full intraday data for a specific month in history if the `month` parameter is specified. The \\"compact\\" option is recommended if you would like to reduce the data size of each API call.\\n\\n- **datatype**  \\n  By default, `datatype=json`. Strings `json` and `csv` are accepted with the following specifications:\\n  - `json` returns the intraday time series in JSON format;\\n  - `csv` returns the time series as a CSV (comma separated value) file.\\n\\n- **apikey**  \\n  Your API key. Claim your free API key [here](https://www.alphavantage.co/support/#api-key).\\n\\n### Examples (click for JSON output)\\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set.\\n```\\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\\n```\\nQuery the most recent full 30 days of intraday data by setting `outputsize=full`.\\n```\\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo\\n```\\nQuery intraday data for a given month in history (e.g., 2009-01). Any month in the last 20+ years (since 2000-01) is supported.\\n```\\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo\\n```\\nExport data as CSV.\\n```\\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv\\n```\\n\\n### Tips\\n- The intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a premium membership plan for your personal use. For commercial use, please contact sales.\\n- Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC. Learn more about the key market data policies you need to know as a data consumer.\\n\\n### Language-specific guides\\nPython  \\n```python\\nimport requests\\n\\n# replace the \\"demo\\" apikey below with your own key from https://www.alphavantage.co/support/#api-key\\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\\nr = requests.get(url)\\ndata = r.json()\\n\\nprint(data)\\n```\\nNodeJS  \\n```javascript\\n\'use strict\';\\nvar request = require(\'request\');\\n\\n// replace the \\"demo\\" apikey below with your own key from https://www.alphavantage.co/support/#api-key\\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\\n\\nrequest.get({\\n    url: url,\\n    json: true,\\n    headers: {\'User-Agent\': \'request\'}\\n  }, (err, res, data) => {\\n    if (err) {\\n      console.log(\'Error:\', err);\\n    } else if (res.statusCode !== 200) {\\n      console.log(\'Status:\', res.statusCode);\\n    } else {\\n      // data is successfully parsed as a JSON object:\\n      console.log(data);\\n    }\\n});\\n```\\nPHP  \\n```php\\n<?php\\n// replace the \\"demo\\" apikey below with your own key from https://www.alphavantage.co/support/#api-key\\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\\n\\ndata = json_decode($json,true);\\n\\nprint_r($data);\\n\\nexit;\\n?>\\n```\\nC#/.NET  \\n```csharp\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Net;\\n\\nnamespace ConsoleTests\\n{\\n    internal class Program\\n    {\\n        private static void Main(string[] args)\\n        {\\n            // replace the \\"demo\\" apikey below with your own key from https://www.alphavantage.co/support/#api-key\\n            string QUERY_URL = \\"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\\";\\n            Uri queryUri = new Uri(QUERY_URL);\\n\\n            using (WebClient client = new WebClient())\\n            {\\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\\n                // do something with the json_data\\n            }\\n        }\\n    }\\n}\\n```"}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=ProcessedSection(section_type='endpoint', related_endpoints=['https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv'], filename='time-series-intraday-trending.md', content='## TIME_SERIES_INTRADAY Trending\n\n### Trending\nThis API returns current and 20+ years of historical intraday OHLCV time series of the equity specified, covering pre-market and post-market hours where applicable (e.g., 4:00am to 8:00pm Eastern Time for the US market). You can query both raw (as-traded) and split/dividend-adjusted intraday data from this endpoint. The OHLCV data is sometimes called "candles" in finance literature.\n\n### API Parameters\n\n#### Required:\n- **function**  \n  The time series of your choice. In this case,  \n  `function=TIME_SERIES_INTRADAY`\n\n- **symbol**  \n  The name of the equity of your choice. For example:  \n  `symbol=IBM`\n\n- **interval**  \n  Time interval between two consecutive data points in the time series. The following values are supported:  \n  `1min`, `5min`, `15min`, `30min`, `60min`\n\n#### Optional:\n- **adjusted**  \n  By default, `adjusted=true` and the output time series is adjusted by historical split and dividend events. Set `adjusted=false` to query raw (as-traded) intraday values.\n\n- **extended_hours**  \n  By default, `extended_hours=true` and the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00am to 8:00pm Eastern Time for the US market). Set `extended_hours=false` to query regular trading hours (9:30am to 4:00pm US Eastern Time) only.\n\n- **month**  \n  By default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the `month` parameter (in YYYY-MM format) to query a specific month in history. For example, `month=2009-01`. Any month in the last 20+ years since 2000-01 (January 2000) is supported.\n\n- **outputsize**  \n  By default, `outputsize=compact`. Strings `compact` and `full` are accepted with the following specifications:\n  - `compact` returns only the latest 100 data points in the intraday time series;\n  - `full` returns trailing 30 days of the most recent intraday data if the `month` parameter (see above) is not specified, or the full intraday data for a specific month in history if the `month` parameter is specified. The "compact" option is recommended if you would like to reduce the data size of each API call.\n\n- **datatype**  \n  By default, `datatype=json`. Strings `json` and `csv` are accepted with the following specifications:\n  - `json` returns the intraday time series in JSON format;\n  - `csv` returns the time series as a CSV (comma separated value) file.\n\n- **apikey**  \n  Your API key. Claim your free API key [here](https://www.alphavantage.co/support/#api-key).\n\n### Examples (click for JSON output)\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set.\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\n```\nQuery the most recent full 30 days of intraday data by setting `outputsize=full`.\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo\n```\nQuery intraday data for a given month in history (e.g., 2009-01). Any month in the last 20+ years (since 2000-01) is supported.\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo\n```\nExport data as CSV.\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv\n```\n\n### Tips\n- The intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a premium membership plan for your personal use. For commercial use, please contact sales.\n- Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC. Learn more about the key market data policies you need to know as a data consumer.\n\n### Language-specific guides\nPython  \n```python\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nNodeJS  \n```javascript\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\nPHP  \n```php\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\ndata = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n?>\n```\nC#/.NET  \n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n                // do something with the json_data\n            }\n        }\n    }\n}\n```')))], created=1735072855, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=1870, prompt_tokens=4352, total_tokens=6222, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))
2024-12-24 12:41:07,545 - root - DEBUG - Parsed result: {'section_type': 'endpoint', 'related_endpoints': ['https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv'], 'filename': 'time-series-intraday-trending.md', 'content': '## TIME_SERIES_INTRADAY Trending\n\n### Trending\nThis API returns current and 20+ years of historical intraday OHLCV time series of the equity specified, covering pre-market and post-market hours where applicable (e.g., 4:00am to 8:00pm Eastern Time for the US market). You can query both raw (as-traded) and split/dividend-adjusted intraday data from this endpoint. The OHLCV data is sometimes called "candles" in finance literature.\n\n### API Parameters\n\n#### Required:\n- **function**  \n  The time series of your choice. In this case,  \n  `function=TIME_SERIES_INTRADAY`\n\n- **symbol**  \n  The name of the equity of your choice. For example:  \n  `symbol=IBM`\n\n- **interval**  \n  Time interval between two consecutive data points in the time series. The following values are supported:  \n  `1min`, `5min`, `15min`, `30min`, `60min`\n\n#### Optional:\n- **adjusted**  \n  By default, `adjusted=true` and the output time series is adjusted by historical split and dividend events. Set `adjusted=false` to query raw (as-traded) intraday values.\n\n- **extended_hours**  \n  By default, `extended_hours=true` and the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00am to 8:00pm Eastern Time for the US market). Set `extended_hours=false` to query regular trading hours (9:30am to 4:00pm US Eastern Time) only.\n\n- **month**  \n  By default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the `month` parameter (in YYYY-MM format) to query a specific month in history. For example, `month=2009-01`. Any month in the last 20+ years since 2000-01 (January 2000) is supported.\n\n- **outputsize**  \n  By default, `outputsize=compact`. Strings `compact` and `full` are accepted with the following specifications:\n  - `compact` returns only the latest 100 data points in the intraday time series;\n  - `full` returns trailing 30 days of the most recent intraday data if the `month` parameter (see above) is not specified, or the full intraday data for a specific month in history if the `month` parameter is specified. The "compact" option is recommended if you would like to reduce the data size of each API call.\n\n- **datatype**  \n  By default, `datatype=json`. Strings `json` and `csv` are accepted with the following specifications:\n  - `json` returns the intraday time series in JSON format;\n  - `csv` returns the time series as a CSV (comma separated value) file.\n\n- **apikey**  \n  Your API key. Claim your free API key [here](https://www.alphavantage.co/support/#api-key).\n\n### Examples (click for JSON output)\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set.\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\n```\nQuery the most recent full 30 days of intraday data by setting `outputsize=full`.\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo\n```\nQuery intraday data for a given month in history (e.g., 2009-01). Any month in the last 20+ years (since 2000-01) is supported.\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo\n```\nExport data as CSV.\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv\n```\n\n### Tips\n- The intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a premium membership plan for your personal use. For commercial use, please contact sales.\n- Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC. Learn more about the key market data policies you need to know as a data consumer.\n\n### Language-specific guides\nPython  \n```python\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nNodeJS  \n```javascript\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\nPHP  \n```php\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\ndata = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n?>\n```\nC#/.NET  \n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n                // do something with the json_data\n            }\n        }\n    }\n}\n```'}
2024-12-24 12:41:07,547 - root - INFO - Successfully processed section 'TIME_SERIES_INTRADAY Trending' -> time-series-intraday-trending.md
2024-12-24 12:41:07,548 - root - DEBUG - Successfully processed section 'TIME_SERIES_INTRADAY Trending'
2024-12-24 12:41:07,548 - root - DEBUG - Result type: endpoint
2024-12-24 12:41:07,548 - root - DEBUG - Generated filename: time-series-intraday-trending.md
2024-12-24 12:41:07,548 - root - DEBUG - Processing section with title: API Parameters
2024-12-24 12:41:07,548 - root - DEBUG - Section content length: 2729 chars
2024-12-24 12:41:07,548 - root - DEBUG - Section breadcrumbs: ['ROOT', 'Time Series Stock Data APIs', 'TIME_SERIES_INTRADAY Trending', 'API Parameters']
2024-12-24 12:41:07,549 - root - DEBUG - Token count for section 'API Parameters': 951
2024-12-24 12:41:07,549 - root - DEBUG - Context window size: 128000
2024-12-24 12:41:07,549 - root - INFO - Processing section 'API Parameters' with model gpt-4o-mini.
2024-12-24 12:41:07,550 - root - DEBUG - Prompt length: 3597 chars, 951 tokens
2024-12-24 12:41:07,553 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x0000014E4EC4E340>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an API documentation expert.'}, {'role': 'user', 'content': '\nAnalyze the following HTML documentation section and provide a structured breakdown.\n\nTitle: API Parameters\nContent: ## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe time series of your choice. In this case,\nfunction=TIME_SERIES_INTRADAY\n```\nfunction=TIME_SERIES_INTRADAY\n```\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nThe name of the equity of your choice. For example:\nsymbol=IBM\n```\nsymbol=IBM\n```\n‚ùö Required:\ninterval\n‚ùö Required:\ninterval\n```\ninterval\n```\nTime interval between two consecutive data points in the time series. The following values are supported:\n1min\n,\n5min\n,\n15min\n,\n30min\n,\n60min\n```\n1min\n```\n```\n5min\n```\n```\n15min\n```\n```\n30min\n```\n```\n60min\n```\n‚ùö Optional:\nadjusted\n```\nadjusted\n```\nBy default,\nadjusted=true\nand the output time series is adjusted by historical split and dividend events. Set\nadjusted=false\nto query raw (as-traded) intraday values.\n```\nadjusted=true\n```\n```\nadjusted=false\n```\n‚ùö Optional:\nextended_hours\n```\nextended_hours\n```\nBy default,\nextended_hours=true\nand the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00am to 8:00pm Eastern Time for the US market). Set\nextended_hours=false\nto query regular trading hours (9:30am to 4:00pm US Eastern Time) only.\n```\nextended_hours=true\n```\n```\nextended_hours=false\n```\n‚ùö Optional:\nmonth\n```\nmonth\n```\nBy default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the\nmonth\nparameter (in YYYY-MM format) to query a specific month in history. For example,\nmonth=2009-01\n. Any month in the last 20+ years since 2000-01 (January 2000) is supported.\n```\nmonth\n```\n```\nmonth=2009-01\n```\n‚ùö Optional:\noutputsize\n```\noutputsize\n```\nBy default,\noutputsize=compact\n. Strings\ncompact\nand\nfull\nare accepted with the following specifications:\ncompact\nreturns only the latest 100 data points in the intraday time series;\nfull\nreturns trailing 30 days of the most recent intraday data if the\nmonth\nparameter (see above) is not specified, or the full intraday data for a specific month in history if the\nmonth\nparameter is specified. The "compact" option is recommended if you would like to reduce the data size of each API call.\n```\noutputsize=compact\n```\n```\ncompact\n```\n```\nfull\n```\n```\ncompact\n```\n```\nfull\n```\n```\nmonth\n```\n```\nmonth\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the intraday time series in JSON format;\ncsv\nreturns the time series as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n\nFormat your response to match these exact field requirements:\n\n- section_type: Must be one of ["endpoint", "concept", "overview", "other"]\n  Choose based on the content type:\n  - "endpoint" for API endpoint documentation\n  - "concept" for explanatory content about concepts\n  - "overview" for introductory or high-level content\n  - "other" for anything else\n\n- related_endpoints: A list of strings containing any API endpoints mentioned\n  in the content. Return an empty list if none found.\n\n- filename: Create a URL-safe filename ending in .md.\n  Convert spaces to hyphens, remove special characters, use lowercase.\n\n- content: The section content converted to well-formatted Markdown.\n  Ensure proper heading hierarchy and code block formatting.\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 16384, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'properties': {'section_type': {'title': 'Section Type', 'type': 'string'}, 'related_endpoints': {'items': {'type': 'string'}, 'title': 'Related Endpoints', 'type': 'array'}, 'filename': {'title': 'Filename', 'type': 'string'}, 'content': {'title': 'Content', 'type': 'string'}}, 'required': ['section_type', 'related_endpoints', 'filename', 'content'], 'title': 'ProcessedSection', 'type': 'object', 'additionalProperties': False}, 'name': 'ProcessedSection', 'strict': True}}, 'stream': False}}
2024-12-24 12:41:07,557 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-12-24 12:41:07,557 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-12-24 12:41:07,558 - httpcore.http11 - DEBUG - send_request_headers.complete
2024-12-24 12:41:07,558 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-12-24 12:41:07,558 - httpcore.http11 - DEBUG - send_request_body.complete
2024-12-24 12:41:07,558 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-12-24 12:41:11,604 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 24 Dec 2024 20:41:13 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vtqywlnqqks67d3wh4wlto26'), (b'openai-processing-ms', b'3919'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_26a560b4068b1c1dc18b413a2258c91b'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8f73691c48d709f1-LAS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-12-24 12:41:11,608 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-24 12:41:11,609 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-12-24 12:41:11,610 - httpcore.http11 - DEBUG - receive_response_body.complete
2024-12-24 12:41:11,611 - httpcore.http11 - DEBUG - response_closed.started
2024-12-24 12:41:11,611 - httpcore.http11 - DEBUG - response_closed.complete
2024-12-24 12:41:11,612 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 24 Dec 2024 20:41:13 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-vtqywlnqqks67d3wh4wlto26', 'openai-processing-ms': '3919', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_26a560b4068b1c1dc18b413a2258c91b', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8f73691c48d709f1-LAS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-12-24 12:41:11,613 - openai._base_client - DEBUG - request_id: req_26a560b4068b1c1dc18b413a2258c91b
2024-12-24 12:41:11,616 - root - DEBUG - Raw completion response: ParsedChatCompletion[ProcessedSection](id='chatcmpl-Ai60D5KX2uDnBiIVbN32lDXDCwaac', choices=[ParsedChoice[ProcessedSection](finish_reason='stop', index=0, logprobs=None, message=ParsedChatCompletionMessage[ProcessedSection](content='{"section_type":"endpoint","related_endpoints":[],"filename":"api-parameters.md","content":"## API Parameters\\n\\n### Required:\\n- `function`\\n  The time series of your choice. In this case,  `function=TIME_SERIES_INTRADAY`\\n\\n- `symbol`\\n  The name of the equity of your choice. For example: `symbol=IBM`\\n\\n- `interval`\\n  Time interval between two consecutive data points in the time series. The following values are supported:\\n  - `1min`\\n  - `5min`\\n  - `15min`\\n  - `30min`\\n  - `60min`\\n\\n### Optional:\\n- `adjusted`\\n  By default, `adjusted=true` and the output time series is adjusted by historical split and dividend events. Set `adjusted=false` to query raw (as-traded) intraday values.\\n\\n- `extended_hours`\\n  By default, `extended_hours=true` and the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00am to 8:00pm Eastern Time for the US market). Set `extended_hours=false` to query regular trading hours (9:30am to 4:00pm US Eastern Time) only.\\n\\n- `month`\\n  By default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the `month` parameter (in YYYY-MM format) to query a specific month in history. For example, `month=2009-01`. Any month in the last 20+ years since 2000-01 (January 2000) is supported.\\n\\n- `outputsize`\\n  By default, `outputsize=compact`. Strings `compact` and `full` are accepted with the following specifications:\\n  - `compact`: returns only the latest 100 data points in the intraday time series;\\n  - `full`: returns trailing 30 days of the most recent intraday data if the `month` parameter is not specified, or the full intraday data for a specific month in history if the `month` parameter is specified. The \\"compact\\" option is recommended if you would like to reduce the data size of each API call.\\n\\n- `datatype`\\n  By default, `datatype=json`. Strings `json` and `csv` are accepted with the following specifications:\\n  - `json`: returns the intraday time series in JSON format;\\n  - `csv`: returns the time series as a CSV (comma separated value) file.\\n\\n### Required:\\n- `apikey`\\n  Your API key. Claim your free API key [here](#)."}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=ProcessedSection(section_type='endpoint', related_endpoints=[], filename='api-parameters.md', content='## API Parameters\n\n### Required:\n- `function`\n  The time series of your choice. In this case,  `function=TIME_SERIES_INTRADAY`\n\n- `symbol`\n  The name of the equity of your choice. For example: `symbol=IBM`\n\n- `interval`\n  Time interval between two consecutive data points in the time series. The following values are supported:\n  - `1min`\n  - `5min`\n  - `15min`\n  - `30min`\n  - `60min`\n\n### Optional:\n- `adjusted`\n  By default, `adjusted=true` and the output time series is adjusted by historical split and dividend events. Set `adjusted=false` to query raw (as-traded) intraday values.\n\n- `extended_hours`\n  By default, `extended_hours=true` and the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00am to 8:00pm Eastern Time for the US market). Set `extended_hours=false` to query regular trading hours (9:30am to 4:00pm US Eastern Time) only.\n\n- `month`\n  By default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the `month` parameter (in YYYY-MM format) to query a specific month in history. For example, `month=2009-01`. Any month in the last 20+ years since 2000-01 (January 2000) is supported.\n\n- `outputsize`\n  By default, `outputsize=compact`. Strings `compact` and `full` are accepted with the following specifications:\n  - `compact`: returns only the latest 100 data points in the intraday time series;\n  - `full`: returns trailing 30 days of the most recent intraday data if the `month` parameter is not specified, or the full intraday data for a specific month in history if the `month` parameter is specified. The "compact" option is recommended if you would like to reduce the data size of each API call.\n\n- `datatype`\n  By default, `datatype=json`. Strings `json` and `csv` are accepted with the following specifications:\n  - `json`: returns the intraday time series in JSON format;\n  - `csv`: returns the time series as a CSV (comma separated value) file.\n\n### Required:\n- `apikey`\n  Your API key. Claim your free API key [here](#).')))], created=1735072869, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=590, prompt_tokens=1051, total_tokens=1641, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))
2024-12-24 12:41:11,620 - root - DEBUG - Parsed result: {'section_type': 'endpoint', 'related_endpoints': [], 'filename': 'api-parameters.md', 'content': '## API Parameters\n\n### Required:\n- `function`\n  The time series of your choice. In this case,  `function=TIME_SERIES_INTRADAY`\n\n- `symbol`\n  The name of the equity of your choice. For example: `symbol=IBM`\n\n- `interval`\n  Time interval between two consecutive data points in the time series. The following values are supported:\n  - `1min`\n  - `5min`\n  - `15min`\n  - `30min`\n  - `60min`\n\n### Optional:\n- `adjusted`\n  By default, `adjusted=true` and the output time series is adjusted by historical split and dividend events. Set `adjusted=false` to query raw (as-traded) intraday values.\n\n- `extended_hours`\n  By default, `extended_hours=true` and the output time series will include both the regular trading hours and the extended (pre-market and post-market) trading hours (4:00am to 8:00pm Eastern Time for the US market). Set `extended_hours=false` to query regular trading hours (9:30am to 4:00pm US Eastern Time) only.\n\n- `month`\n  By default, this parameter is not set and the API will return intraday data for the most recent days of trading. You can use the `month` parameter (in YYYY-MM format) to query a specific month in history. For example, `month=2009-01`. Any month in the last 20+ years since 2000-01 (January 2000) is supported.\n\n- `outputsize`\n  By default, `outputsize=compact`. Strings `compact` and `full` are accepted with the following specifications:\n  - `compact`: returns only the latest 100 data points in the intraday time series;\n  - `full`: returns trailing 30 days of the most recent intraday data if the `month` parameter is not specified, or the full intraday data for a specific month in history if the `month` parameter is specified. The "compact" option is recommended if you would like to reduce the data size of each API call.\n\n- `datatype`\n  By default, `datatype=json`. Strings `json` and `csv` are accepted with the following specifications:\n  - `json`: returns the intraday time series in JSON format;\n  - `csv`: returns the time series as a CSV (comma separated value) file.\n\n### Required:\n- `apikey`\n  Your API key. Claim your free API key [here](#).'}
2024-12-24 12:41:11,622 - root - INFO - Successfully processed section 'API Parameters' -> api-parameters.md
2024-12-24 12:41:11,622 - root - DEBUG - Successfully processed section 'API Parameters'
2024-12-24 12:41:11,622 - root - DEBUG - Result type: endpoint
2024-12-24 12:41:11,622 - root - DEBUG - Generated filename: api-parameters.md
2024-12-24 12:41:11,622 - root - DEBUG - Processing section with title: Examples (click for JSON output)
2024-12-24 12:41:11,622 - root - DEBUG - Section content length: 3116 chars
2024-12-24 12:41:11,622 - root - DEBUG - Section breadcrumbs: ['ROOT', 'Time Series Stock Data APIs', 'TIME_SERIES_INTRADAY Trending', 'Examples (click for JSON output)']
2024-12-24 12:41:11,623 - root - DEBUG - Token count for section 'Examples (click for JSON output)': 1070
2024-12-24 12:41:11,624 - root - DEBUG - Context window size: 128000
2024-12-24 12:41:11,624 - root - INFO - Processing section 'Examples (click for JSON output)' with model gpt-4o-mini.
2024-12-24 12:41:11,625 - root - DEBUG - Prompt length: 4002 chars, 1070 tokens
2024-12-24 12:41:11,627 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x0000014E4EC4F7E0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an API documentation expert.'}, {'role': 'user', 'content': '\nAnalyze the following HTML documentation section and provide a structured breakdown.\n\nTitle: Examples (click for JSON output)\nContent: ## Examples (click for JSON output)\n\nExamples (click for JSON output)\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\n```\nfunction\nsymbol\ninterval\napikey\nQuery the most recent full 30 days of intraday data by setting outputsize=full\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo\n```\nfunction\nsymbol\ninterval\noutputsize\napikey\nQuery intraday data for a given month in history (e.g., 2009-01). Any month in the last 20+ years (since 2000-01) is supported\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\nmonth\n=2009-01&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\nmonth\n=2009-01&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo\n```\nfunction\nsymbol\ninterval\nmonth\noutputsize\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_INTRADAY&\nsymbol\n=IBM&\ninterval\n=5min&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv\n```\nfunction\nsymbol\ninterval\napikey\ndatatype\nüí° Tip: the intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a\npremium membership plan\nfor your personal use. For commercial use, please\ncontact sales\n.\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC.\nLearn more\nabout the key market data policies you need to know as a data consumer.\nüí° Tip: the intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a\npremium membership plan\nfor your personal use. For commercial use, please\ncontact sales\n.\npremium membership plan\ncontact sales\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC.\nLearn more\nabout the key market data policies you need to know as a data consumer.\nLearn more\n\nFormat your response to match these exact field requirements:\n\n- section_type: Must be one of ["endpoint", "concept", "overview", "other"]\n  Choose based on the content type:\n  - "endpoint" for API endpoint documentation\n  - "concept" for explanatory content about concepts\n  - "overview" for introductory or high-level content\n  - "other" for anything else\n\n- related_endpoints: A list of strings containing any API endpoints mentioned\n  in the content. Return an empty list if none found.\n\n- filename: Create a URL-safe filename ending in .md.\n  Convert spaces to hyphens, remove special characters, use lowercase.\n\n- content: The section content converted to well-formatted Markdown.\n  Ensure proper heading hierarchy and code block formatting.\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 16384, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'properties': {'section_type': {'title': 'Section Type', 'type': 'string'}, 'related_endpoints': {'items': {'type': 'string'}, 'title': 'Related Endpoints', 'type': 'array'}, 'filename': {'title': 'Filename', 'type': 'string'}, 'content': {'title': 'Content', 'type': 'string'}}, 'required': ['section_type', 'related_endpoints', 'filename', 'content'], 'title': 'ProcessedSection', 'type': 'object', 'additionalProperties': False}, 'name': 'ProcessedSection', 'strict': True}}, 'stream': False}}
2024-12-24 12:41:11,631 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-12-24 12:41:11,632 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-12-24 12:41:11,633 - httpcore.http11 - DEBUG - send_request_headers.complete
2024-12-24 12:41:11,633 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-12-24 12:41:11,633 - httpcore.http11 - DEBUG - send_request_body.complete
2024-12-24 12:41:11,633 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-12-24 12:41:15,464 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 24 Dec 2024 20:41:17 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vtqywlnqqks67d3wh4wlto26'), (b'openai-processing-ms', b'3702'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_5dbfe08390bf52bd02201fe62c73c947'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8f736935bac209f1-LAS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-12-24 12:41:15,465 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-24 12:41:15,465 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-12-24 12:41:15,466 - httpcore.http11 - DEBUG - receive_response_body.complete
2024-12-24 12:41:15,466 - httpcore.http11 - DEBUG - response_closed.started
2024-12-24 12:41:15,466 - httpcore.http11 - DEBUG - response_closed.complete
2024-12-24 12:41:15,467 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 24 Dec 2024 20:41:17 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-vtqywlnqqks67d3wh4wlto26', 'openai-processing-ms': '3702', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_5dbfe08390bf52bd02201fe62c73c947', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8f736935bac209f1-LAS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-12-24 12:41:15,467 - openai._base_client - DEBUG - request_id: req_5dbfe08390bf52bd02201fe62c73c947
2024-12-24 12:41:15,469 - root - DEBUG - Raw completion response: ParsedChatCompletion[ProcessedSection](id='chatcmpl-Ai60I9gG9AR88ekw1L9etgQyUG676', choices=[ParsedChoice[ProcessedSection](finish_reason='stop', index=0, logprobs=None, message=ParsedChatCompletionMessage[ProcessedSection](content='{"section_type":"endpoint","related_endpoints":["https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo","https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo","https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo","https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv"],"filename":"examples-click-for-json-output.md","content":"## Examples (click for JSON output)\\n\\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set:\\n\\n```plaintext\\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\\n```\\n\\n### Query the most recent full 30 days of intraday data by setting `outputsize=full`\\n\\n```plaintext\\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo\\n```\\n\\n### Query intraday data for a given month in history (e.g., 2009-01)\\n- Any month in the last 20+ years (since 2000-01) is supported:\\n\\n```plaintext\\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo\\n```\\n\\n### Get intraday data in CSV format\\n\\n```plaintext\\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv\\n```\\n\\nüí° **Tip:** The intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a premium membership plan for your personal use. For commercial use, please contact sales.\\n\\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC.\\n\\nLearn more about the key market data policies you need to know as a data consumer."}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=ProcessedSection(section_type='endpoint', related_endpoints=['https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv'], filename='examples-click-for-json-output.md', content='## Examples (click for JSON output)\n\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set:\n\n```plaintext\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\n```\n\n### Query the most recent full 30 days of intraday data by setting `outputsize=full`\n\n```plaintext\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo\n```\n\n### Query intraday data for a given month in history (e.g., 2009-01)\n- Any month in the last 20+ years (since 2000-01) is supported:\n\n```plaintext\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo\n```\n\n### Get intraday data in CSV format\n\n```plaintext\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv\n```\n\nüí° **Tip:** The intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a premium membership plan for your personal use. For commercial use, please contact sales.\n\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC.\n\nLearn more about the key market data policies you need to know as a data consumer.')))], created=1735072874, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=582, prompt_tokens=1170, total_tokens=1752, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))
2024-12-24 12:41:15,472 - root - DEBUG - Parsed result: {'section_type': 'endpoint', 'related_endpoints': ['https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo', 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv'], 'filename': 'examples-click-for-json-output.md', 'content': '## Examples (click for JSON output)\n\nThe API will return the most recent 100 intraday OHLCV bars by default when the outputsize parameter is not set:\n\n```plaintext\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\n```\n\n### Query the most recent full 30 days of intraday data by setting `outputsize=full`\n\n```plaintext\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&outputsize=full&apikey=demo\n```\n\n### Query intraday data for a given month in history (e.g., 2009-01)\n- Any month in the last 20+ years (since 2000-01) is supported:\n\n```plaintext\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&month=2009-01&outputsize=full&apikey=demo\n```\n\n### Get intraday data in CSV format\n\n```plaintext\nhttps://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo&datatype=csv\n```\n\nüí° **Tip:** The intraday data (including 20+ years of historical data) is updated at the end of each trading day for all users by default. If you would like to access realtime or 15-minute delayed intraday data, please subscribe to a premium membership plan for your personal use. For commercial use, please contact sales.\n\n* Realtime and 15-minute delayed US market data is regulated by the stock exchanges, FINRA, and the SEC.\n\nLearn more about the key market data policies you need to know as a data consumer.'}
2024-12-24 12:41:15,473 - root - INFO - Successfully processed section 'Examples (click for JSON output)' -> examples-click-for-json-output.md
2024-12-24 12:41:15,473 - root - DEBUG - Successfully processed section 'Examples (click for JSON output)'
2024-12-24 12:41:15,474 - root - DEBUG - Result type: endpoint
2024-12-24 12:41:15,474 - root - DEBUG - Generated filename: examples-click-for-json-output.md
2024-12-24 12:41:15,475 - root - DEBUG - Processing section with title: Language-specific guides
2024-12-24 12:41:15,475 - root - DEBUG - Section content length: 10963 chars
2024-12-24 12:41:15,475 - root - DEBUG - Section breadcrumbs: ['ROOT', 'Time Series Stock Data APIs', 'TIME_SERIES_INTRADAY Trending', 'Language-specific guides']
2024-12-24 12:41:15,478 - root - DEBUG - Token count for section 'Language-specific guides': 2476
2024-12-24 12:41:15,478 - root - DEBUG - Context window size: 128000
2024-12-24 12:41:15,478 - root - INFO - Processing section 'Language-specific guides' with model gpt-4o-mini.
2024-12-24 12:41:15,480 - root - DEBUG - Prompt length: 11841 chars, 2476 tokens
2024-12-24 12:41:15,483 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x0000014E50BBF7E0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an API documentation expert.'}, {'role': 'user', 'content': '\nAnalyze the following HTML documentation section and provide a structured breakdown.\n\nTitle: Language-specific guides\nContent: ## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n\nFormat your response to match these exact field requirements:\n\n- section_type: Must be one of ["endpoint", "concept", "overview", "other"]\n  Choose based on the content type:\n  - "endpoint" for API endpoint documentation\n  - "concept" for explanatory content about concepts\n  - "overview" for introductory or high-level content\n  - "other" for anything else\n\n- related_endpoints: A list of strings containing any API endpoints mentioned\n  in the content. Return an empty list if none found.\n\n- filename: Create a URL-safe filename ending in .md.\n  Convert spaces to hyphens, remove special characters, use lowercase.\n\n- content: The section content converted to well-formatted Markdown.\n  Ensure proper heading hierarchy and code block formatting.\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 16384, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'properties': {'section_type': {'title': 'Section Type', 'type': 'string'}, 'related_endpoints': {'items': {'type': 'string'}, 'title': 'Related Endpoints', 'type': 'array'}, 'filename': {'title': 'Filename', 'type': 'string'}, 'content': {'title': 'Content', 'type': 'string'}}, 'required': ['section_type', 'related_endpoints', 'filename', 'content'], 'title': 'ProcessedSection', 'type': 'object', 'additionalProperties': False}, 'name': 'ProcessedSection', 'strict': True}}, 'stream': False}}
2024-12-24 12:41:15,491 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-12-24 12:41:15,491 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-12-24 12:41:15,492 - httpcore.http11 - DEBUG - send_request_headers.complete
2024-12-24 12:41:15,492 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-12-24 12:41:15,492 - httpcore.http11 - DEBUG - send_request_body.complete
2024-12-24 12:41:15,493 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
2024-12-24 12:41:22,260 - httpcore.http11 - DEBUG - receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Date', b'Tue, 24 Dec 2024 20:41:24 GMT'), (b'Content-Type', b'application/json'), (b'Transfer-Encoding', b'chunked'), (b'Connection', b'keep-alive'), (b'access-control-expose-headers', b'X-Request-ID'), (b'openai-organization', b'user-vtqywlnqqks67d3wh4wlto26'), (b'openai-processing-ms', b'6635'), (b'openai-version', b'2020-10-01'), (b'x-ratelimit-limit-requests', b'10000'), (b'x-ratelimit-limit-tokens', b'10000000'), (b'x-ratelimit-remaining-requests', b'9999'), (b'x-ratelimit-remaining-tokens', b'9991828'), (b'x-ratelimit-reset-requests', b'6ms'), (b'x-ratelimit-reset-tokens', b'49ms'), (b'x-request-id', b'req_7516d3d0b5136cbfe329f486299df436'), (b'strict-transport-security', b'max-age=31536000; includeSubDomains; preload'), (b'CF-Cache-Status', b'DYNAMIC'), (b'X-Content-Type-Options', b'nosniff'), (b'Server', b'cloudflare'), (b'CF-RAY', b'8f73694ddb0d09f1-LAS'), (b'Content-Encoding', b'gzip'), (b'alt-svc', b'h3=":443"; ma=86400')])
2024-12-24 12:41:22,262 - httpx - INFO - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
2024-12-24 12:41:22,262 - httpcore.http11 - DEBUG - receive_response_body.started request=<Request [b'POST']>
2024-12-24 12:41:22,280 - httpcore.http11 - DEBUG - receive_response_body.complete
2024-12-24 12:41:22,281 - httpcore.http11 - DEBUG - response_closed.started
2024-12-24 12:41:22,281 - httpcore.http11 - DEBUG - response_closed.complete
2024-12-24 12:41:22,281 - openai._base_client - DEBUG - HTTP Response: POST https://api.openai.com/v1/chat/completions "200 OK" Headers({'date': 'Tue, 24 Dec 2024 20:41:24 GMT', 'content-type': 'application/json', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'access-control-expose-headers': 'X-Request-ID', 'openai-organization': 'user-vtqywlnqqks67d3wh4wlto26', 'openai-processing-ms': '6635', 'openai-version': '2020-10-01', 'x-ratelimit-limit-requests': '10000', 'x-ratelimit-limit-tokens': '10000000', 'x-ratelimit-remaining-requests': '9999', 'x-ratelimit-remaining-tokens': '9991828', 'x-ratelimit-reset-requests': '6ms', 'x-ratelimit-reset-tokens': '49ms', 'x-request-id': 'req_7516d3d0b5136cbfe329f486299df436', 'strict-transport-security': 'max-age=31536000; includeSubDomains; preload', 'cf-cache-status': 'DYNAMIC', 'x-content-type-options': 'nosniff', 'server': 'cloudflare', 'cf-ray': '8f73694ddb0d09f1-LAS', 'content-encoding': 'gzip', 'alt-svc': 'h3=":443"; ma=86400'})
2024-12-24 12:41:22,282 - openai._base_client - DEBUG - request_id: req_7516d3d0b5136cbfe329f486299df436
2024-12-24 12:41:22,284 - root - DEBUG - Raw completion response: ParsedChatCompletion[ProcessedSection](id='chatcmpl-Ai60LKuP3YfUgxgANRJaCHegWtNOn', choices=[ParsedChoice[ProcessedSection](finish_reason='stop', index=0, logprobs=None, message=ParsedChatCompletionMessage[ProcessedSection](content='{"section_type":"other","related_endpoints":[],"filename":"language-specific-guides.md","content":"## Language-specific guides\\n\\n### Supported Languages\\n- Python\\n- NodeJS\\n- PHP\\n- C#/.NET\\n- Other\\n\\n### Python Example\\n```python\\nimport requests\\n\\n# replace the \\"demo\\" apikey below with your own key from https://www.alphavantage.co/support/#api-key\\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\\nr = requests.get(url)\\ndata = r.json()\\n\\nprint(data)\\n```\\n\\n### NodeJS Example\\n```javascript\\n\'use strict\';\\nvar request = require(\'request\');\\n\\n// replace the \\"demo\\" apikey below with your own key from https://www.alphavantage.co/support/#api-key\\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\\n\\nrequest.get({\\n    url: url,\\n    json: true,\\n    headers: {\'User-Agent\': \'request\'}\\n  }, (err, res, data) => {\\n    if (err) {\\n      console.log(\'Error:\', err);\\n    } else if (res.statusCode !== 200) {\\n      console.log(\'Status:\', res.statusCode);\\n    } else {\\n      // data is successfully parsed as a JSON object:\\n      console.log(data);\\n    }\\n});\\n```\\n\\n### PHP Example\\n```php\\n<?php\\n// replace the \\"demo\\" apikey below with your own key from https://www.alphavantage.co/support/#api-key\\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\\n\\ndata = json_decode($json,true);\\n\\nprint_r($data);\\n\\nexit;\\n?>\\n```\\n\\n### C# Example\\n```csharp\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Net;\\n\\n// -------------------------------------------------------------------------\\n// if using .NET Framework\\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\\n// This requires including the reference to System.Web.Extensions in your project\\nusing System.Web.Script.Serialization;\\n// -------------------------------------------------------------------------\\n// if using .Net Core\\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\\nusing System.Text.Json;\\n// -------------------------------------------------------------------------\\n\\nnamespace ConsoleTests\\n{\\n    internal class Program\\n    {\\n        private static void Main(string[] args)\\n        {\\n            // replace the \\"demo\\" apikey below with your own key from https://www.alphavantage.co/support/#api-key\\n            string QUERY_URL = \\"https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\\";\\n            Uri queryUri = new Uri(QUERY_URL);\\n\\n            using (WebClient client = new WebClient())\\n            {\\n                // -------------------------------------------------------------------------\\n                // if using .NET Framework (System.Web.Script.Serialization)\\n\\n                JavaScriptSerializer js = new JavaScriptSerializer();\\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\\n\\n                // -------------------------------------------------------------------------\\n                // if using .NET Core (System.Text.Json)\\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\\n\\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\\n\\n                // -------------------------------------------------------------------------\\n\\n                // do something with the json_data\\n            }\\n        }\\n    }\\n}\\n```\\n\\n---\\n### Additional Resources\\n- Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to give them a try.\\n- If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated spreadsheet add-ons."}', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=[], parsed=ProcessedSection(section_type='other', related_endpoints=[], filename='language-specific-guides.md', content='## Language-specific guides\n\n### Supported Languages\n- Python\n- NodeJS\n- PHP\n- C#/.NET\n- Other\n\n### Python Example\n```python\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\n### NodeJS Example\n```javascript\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\n### PHP Example\n```php\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\ndata = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n?>\n```\n\n### C# Example\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                // -------------------------------------------------------------------------\n                // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n\n---\n### Additional Resources\n- Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to give them a try.\n- If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated spreadsheet add-ons.')))], created=1735072877, model='gpt-4o-mini-2024-07-18', object='chat.completion', service_tier=None, system_fingerprint='fp_0aa8d3e20b', usage=CompletionUsage(completion_tokens=956, prompt_tokens=2576, total_tokens=3532, completion_tokens_details=CompletionTokensDetails(accepted_prediction_tokens=0, audio_tokens=0, reasoning_tokens=0, rejected_prediction_tokens=0), prompt_tokens_details=PromptTokensDetails(audio_tokens=0, cached_tokens=0)))
2024-12-24 12:41:22,287 - root - DEBUG - Parsed result: {'section_type': 'other', 'related_endpoints': [], 'filename': 'language-specific-guides.md', 'content': '## Language-specific guides\n\n### Supported Languages\n- Python\n- NodeJS\n- PHP\n- C#/.NET\n- Other\n\n### Python Example\n```python\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\n### NodeJS Example\n```javascript\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\n### PHP Example\n```php\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo\');\n\ndata = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n?>\n```\n\n### C# Example\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey=demo";\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                // -------------------------------------------------------------------------\n                // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n\n---\n### Additional Resources\n- Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to give them a try.\n- If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated spreadsheet add-ons.'}
2024-12-24 12:41:22,289 - root - INFO - Successfully processed section 'Language-specific guides' -> language-specific-guides.md
2024-12-24 12:41:22,290 - root - DEBUG - Successfully processed section 'Language-specific guides'
2024-12-24 12:41:22,290 - root - DEBUG - Result type: other
2024-12-24 12:41:22,290 - root - DEBUG - Generated filename: language-specific-guides.md
2024-12-24 12:41:22,290 - root - DEBUG - Processing section with title: TIME_SERIES_DAILY
2024-12-24 12:41:22,290 - root - DEBUG - Section content length: 16752 chars
2024-12-24 12:41:22,291 - root - DEBUG - Section breadcrumbs: ['ROOT', 'Time Series Stock Data APIs', 'TIME_SERIES_DAILY']
2024-12-24 12:41:22,293 - root - DEBUG - Token count for section 'TIME_SERIES_DAILY': 4178
2024-12-24 12:41:22,294 - root - DEBUG - Context window size: 128000
2024-12-24 12:41:22,294 - root - INFO - Processing section 'TIME_SERIES_DAILY' with model gpt-4o-mini.
2024-12-24 12:41:22,296 - root - DEBUG - Prompt length: 17623 chars, 4178 tokens
2024-12-24 12:41:22,299 - openai._base_client - DEBUG - Request options: {'method': 'post', 'url': '/chat/completions', 'headers': {'X-Stainless-Helper-Method': 'beta.chat.completions.parse'}, 'files': None, 'post_parser': <function Completions.parse.<locals>.parser at 0x0000014E50BBF1A0>, 'json_data': {'messages': [{'role': 'system', 'content': 'You are an API documentation expert.'}, {'role': 'user', 'content': '\nAnalyze the following HTML documentation section and provide a structured breakdown.\n\nTitle: TIME_SERIES_DAILY\nContent: ## TIME_SERIES_DAILY\n\nThis API returns\nraw\n(as-traded) daily time series (date, daily open, daily high, daily low, daily close, daily volume) of the global equity specified, covering 20+ years of historical data. The OHLCV data is sometimes called "candles" in finance literature. If you are also interested in split/dividend-adjusted data, please use the\nDaily Adjusted API\n, which covers adjusted close values and historical split and dividend events.\nraw\nDaily Adjusted API\n## API Parameters\n\nAPI Parameters\n‚ùö Required:\nfunction\n‚ùö Required:\nfunction\n```\nfunction\n```\nThe time series of your choice. In this case,\nfunction=TIME_SERIES_DAILY\n```\nfunction=TIME_SERIES_DAILY\n```\n‚ùö Required:\nsymbol\n‚ùö Required:\nsymbol\n```\nsymbol\n```\nThe name of the equity of your choice. For example:\nsymbol=IBM\n```\nsymbol=IBM\n```\n‚ùö Optional:\noutputsize\n```\noutputsize\n```\nBy default,\noutputsize=compact\n. Strings\ncompact\nand\nfull\nare accepted with the following specifications:\ncompact\nreturns only the latest 100 data points;\nfull\nreturns the full-length time series of 20+ years of historical data. The "compact" option is recommended if you would like to reduce the data size of each API call.\n```\noutputsize=compact\n```\n```\ncompact\n```\n```\nfull\n```\n```\ncompact\n```\n```\nfull\n```\n‚ùö Optional:\ndatatype\n```\ndatatype\n```\nBy default,\ndatatype=json\n. Strings\njson\nand\ncsv\nare accepted with the following specifications:\njson\nreturns the daily time series in JSON format;\ncsv\nreturns the time series as a CSV (comma separated value) file.\n```\ndatatype=json\n```\n```\njson\n```\n```\ncsv\n```\n```\njson\n```\n```\ncsv\n```\n‚ùö Required:\napikey\n‚ùö Required:\napikey\n```\napikey\n```\nYour API key. Claim your free API key\nhere\n.\nhere\n## Examples (click for JSON output)\n\nExamples (click for JSON output)\nSample ticker traded in the United States\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\n```\nfunction\nsymbol\napikey\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in UK - London Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=TSCO.LON&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=TSCO.LON&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=TSCO.LON&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in Canada - Toronto Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=SHOP.TRT&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=SHOP.TRT&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=SHOP.TRT&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in Canada - Toronto Venture Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=GPV.TRV&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=GPV.TRV&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=GPV.TRV&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in Germany - XETRA\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=MBG.DEX&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=MBG.DEX&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=MBG.DEX&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in India - BSE\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=RELIANCE.BSE&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=RELIANCE.BSE&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=RELIANCE.BSE&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in China - Shanghai Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=600104.SHH&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=600104.SHH&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=600104.SHH&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nSample ticker traded in China - Shenzhen Stock Exchange\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=000002.SHZ&\noutputsize\n=full&\napikey\n=demo\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=000002.SHZ&\noutputsize\n=full&\napikey\n=demo\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=000002.SHZ&outputsize=full&apikey=demo\n```\nfunction\nsymbol\noutputsize\napikey\nThe above is just a small sample of the 100,000+ symbols we support. Please refer to our\nSearch Endpoint\nto look up any supported global stock, ETF, or mutual fund symbols of your interest.\nSearch Endpoint\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\nhttps://www.alphavantage.co/query?\nfunction\n=TIME_SERIES_DAILY&\nsymbol\n=IBM&\napikey\n=demo&\ndatatype\n=csv\n```\nhttps://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo&datatype=csv\n```\nfunction\nsymbol\napikey\ndatatype\n## Language-specific guides\n\nLanguage-specific guides\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nPython\nNodeJS\nPHP\nC#/.NET\nOther\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n```\nimport requests\n\n# replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nurl = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\'\nr = requests.get(url)\ndata = r.json()\n\nprint(data)\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n```\n\'use strict\';\nvar request = require(\'request\');\n\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\nvar url = \'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\';\n\nrequest.get({\n    url: url,\n    json: true,\n    headers: {\'User-Agent\': \'request\'}\n  }, (err, res, data) => {\n    if (err) {\n      console.log(\'Error:\', err);\n    } else if (res.statusCode !== 200) {\n      console.log(\'Status:\', res.statusCode);\n    } else {\n      // data is successfully parsed as a JSON object:\n      console.log(data);\n    }\n});\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\n```\n<?php\n// replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n$json = file_get_contents(\'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo\');\n\n$data = json_decode($json,true);\n\nprint_r($data);\n\nexit;\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\n\n// -------------------------------------------------------------------------\n// if using .NET Framework\n// https://docs.microsoft.com/en-us/dotnet/api/system.web.script.serialization.javascriptserializer?view=netframework-4.8\n// This requires including the reference to System.Web.Extensions in your project\nusing System.Web.Script.Serialization;\n// -------------------------------------------------------------------------\n// if using .Net Core\n// https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=net-5.0\nusing System.Text.Json;\n// -------------------------------------------------------------------------\n\nnamespace ConsoleTests\n{\n    internal class Program\n    {\n        private static void Main(string[] args)\n        {\n            // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key\n            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=IBM&apikey=demo"\n            Uri queryUri = new Uri(QUERY_URL);\n\n            using (WebClient client = new WebClient())\n            {\n                 // -------------------------------------------------------------------------\n                 // if using .NET Framework (System.Web.Script.Serialization)\n\n                JavaScriptSerializer js = new JavaScriptSerializer();\n                dynamic json_data = js.Deserialize(client.DownloadString(queryUri), typeof(object));\n\n                // -------------------------------------------------------------------------\n                // if using .NET Core (System.Text.Json)\n                // using .NET Core libraries to parse JSON is more complicated. For an informative blog post\n                // https://devblogs.microsoft.com/dotnet/try-the-new-system-text-json-apis/\n\n                dynamic json_data = JsonSerializer.Deserialize<Dictionary<string, dynamic>>(client.DownloadString(queryUri));\n\n                // -------------------------------------------------------------------------\n\n                // do something with the json_data\n            }\n        }\n    }\n}\n```\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\n‚ùö Looking for more programming languages? The open-source community has developed over 1000 libraries for Alpha Vantage across 20+ programming languages and frameworks - you may want to\ngive them a try\n.\ngive them a try\n‚ùö If you are a spreadsheet user (e.g., Excel or Google Sheets), please check out our dedicated\nspreadsheet add-ons\n.\nspreadsheet add-ons\n\nFormat your response to match these exact field requirements:\n\n- section_type: Must be one of ["endpoint", "concept", "overview", "other"]\n  Choose based on the content type:\n  - "endpoint" for API endpoint documentation\n  - "concept" for explanatory content about concepts\n  - "overview" for introductory or high-level content\n  - "other" for anything else\n\n- related_endpoints: A list of strings containing any API endpoints mentioned\n  in the content. Return an empty list if none found.\n\n- filename: Create a URL-safe filename ending in .md.\n  Convert spaces to hyphens, remove special characters, use lowercase.\n\n- content: The section content converted to well-formatted Markdown.\n  Ensure proper heading hierarchy and code block formatting.\n'}], 'model': 'gpt-4o-mini', 'max_tokens': 16384, 'response_format': {'type': 'json_schema', 'json_schema': {'schema': {'properties': {'section_type': {'title': 'Section Type', 'type': 'string'}, 'related_endpoints': {'items': {'type': 'string'}, 'title': 'Related Endpoints', 'type': 'array'}, 'filename': {'title': 'Filename', 'type': 'string'}, 'content': {'title': 'Content', 'type': 'string'}}, 'required': ['section_type', 'related_endpoints', 'filename', 'content'], 'title': 'ProcessedSection', 'type': 'object', 'additionalProperties': False}, 'name': 'ProcessedSection', 'strict': True}}, 'stream': False}}
2024-12-24 12:41:22,303 - openai._base_client - DEBUG - Sending HTTP Request: POST https://api.openai.com/v1/chat/completions
2024-12-24 12:41:22,304 - httpcore.http11 - DEBUG - send_request_headers.started request=<Request [b'POST']>
2024-12-24 12:41:22,304 - httpcore.http11 - DEBUG - send_request_headers.complete
2024-12-24 12:41:22,304 - httpcore.http11 - DEBUG - send_request_body.started request=<Request [b'POST']>
2024-12-24 12:41:22,305 - httpcore.http11 - DEBUG - send_request_body.complete
2024-12-24 12:41:22,305 - httpcore.http11 - DEBUG - receive_response_headers.started request=<Request [b'POST']>
